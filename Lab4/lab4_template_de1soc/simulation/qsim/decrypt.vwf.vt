// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/09/2020 15:48:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decrypt
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decrypt_vlg_sample_tst(
	address_compute,
	address_init,
	address_shuffle,
	clk,
	compute_complete,
	data_compute,
	data_init,
	data_shuffle,
	decrypt_start,
	init_complete,
	reset,
	shuffle_complete,
	wren_compute,
	wren_init,
	wren_shuffle,
	sampler_tx
);
input [7:0] address_compute;
input [7:0] address_init;
input [7:0] address_shuffle;
input  clk;
input  compute_complete;
input [7:0] data_compute;
input [7:0] data_init;
input [7:0] data_shuffle;
input  decrypt_start;
input  init_complete;
input  reset;
input  shuffle_complete;
input  wren_compute;
input  wren_init;
input  wren_shuffle;
output sampler_tx;

reg sample;
time current_time;
always @(address_compute or address_init or address_shuffle or clk or compute_complete or data_compute or data_init or data_shuffle or decrypt_start or init_complete or reset or shuffle_complete or wren_compute or wren_init or wren_shuffle)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decrypt_vlg_check_tst (
	address_out,
	compute_reset,
	compute_start,
	data_out,
	decrypt_complete,
	init_reset,
	init_start,
	shuffle_reset,
	shuffle_start,
	wren_out,
	sampler_rx
);
input [7:0] address_out;
input  compute_reset;
input  compute_start;
input [7:0] data_out;
input  decrypt_complete;
input  init_reset;
input  init_start;
input  shuffle_reset;
input  shuffle_start;
input  wren_out;
input sampler_rx;

reg [7:0] address_out_expected;
reg  compute_reset_expected;
reg  compute_start_expected;
reg [7:0] data_out_expected;
reg  decrypt_complete_expected;
reg  init_reset_expected;
reg  init_start_expected;
reg  shuffle_reset_expected;
reg  shuffle_start_expected;
reg  wren_out_expected;

reg [7:0] address_out_prev;
reg  compute_reset_prev;
reg  compute_start_prev;
reg [7:0] data_out_prev;
reg  decrypt_complete_prev;
reg  init_reset_prev;
reg  init_start_prev;
reg  shuffle_reset_prev;
reg  shuffle_start_prev;
reg  wren_out_prev;

reg [7:0] address_out_expected_prev;
reg  compute_reset_expected_prev;
reg  compute_start_expected_prev;
reg [7:0] data_out_expected_prev;
reg  decrypt_complete_expected_prev;
reg  init_reset_expected_prev;
reg  init_start_expected_prev;
reg  shuffle_reset_expected_prev;
reg  shuffle_start_expected_prev;
reg  wren_out_expected_prev;

reg [7:0] last_address_out_exp;
reg  last_compute_reset_exp;
reg  last_compute_start_exp;
reg [7:0] last_data_out_exp;
reg  last_decrypt_complete_exp;
reg  last_init_reset_exp;
reg  last_init_start_exp;
reg  last_shuffle_reset_exp;
reg  last_shuffle_start_exp;
reg  last_wren_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	address_out_prev = address_out;
	compute_reset_prev = compute_reset;
	compute_start_prev = compute_start;
	data_out_prev = data_out;
	decrypt_complete_prev = decrypt_complete;
	init_reset_prev = init_reset;
	init_start_prev = init_start;
	shuffle_reset_prev = shuffle_reset;
	shuffle_start_prev = shuffle_start;
	wren_out_prev = wren_out;
end

// update expected /o prevs

always @(trigger)
begin
	address_out_expected_prev = address_out_expected;
	compute_reset_expected_prev = compute_reset_expected;
	compute_start_expected_prev = compute_start_expected;
	data_out_expected_prev = data_out_expected;
	decrypt_complete_expected_prev = decrypt_complete_expected;
	init_reset_expected_prev = init_reset_expected;
	init_start_expected_prev = init_start_expected;
	shuffle_reset_expected_prev = shuffle_reset_expected;
	shuffle_start_expected_prev = shuffle_start_expected;
	wren_out_expected_prev = wren_out_expected;
end



// expected wren_out
initial
begin
	wren_out_expected = 1'bX;
end 
// expected address_out[ 7 ]
initial
begin
	address_out_expected[7] = 1'b0;
end 
// expected address_out[ 6 ]
initial
begin
	address_out_expected[6] = 1'b1;
end 
// expected address_out[ 5 ]
initial
begin
	address_out_expected[5] = 1'b0;
end 
// expected address_out[ 4 ]
initial
begin
	address_out_expected[4] = 1'b1;
end 
// expected address_out[ 3 ]
initial
begin
	address_out_expected[3] = 1'b1;
end 
// expected address_out[ 2 ]
initial
begin
	address_out_expected[2] = 1'b0;
end 
// expected address_out[ 1 ]
initial
begin
	address_out_expected[1] = 1'b0;
end 
// expected address_out[ 0 ]
initial
begin
	address_out_expected[0] = 1'b0;
end 

// expected compute_reset
initial
begin
	compute_reset_expected = 1'bX;
end 

// expected compute_start
initial
begin
	compute_start_expected = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'b0;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'b1;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'b0;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'b1;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'b1;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'b0;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'b0;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'b0;
end 

// expected init_reset
initial
begin
	init_reset_expected = 1'bX;
end 

// expected init_start
initial
begin
	init_start_expected = 1'bX;
end 

// expected shuffle_start
initial
begin
	shuffle_start_expected = 1'bX;
end 

// expected shuffle_reset
initial
begin
	shuffle_reset_expected = 1'bX;
end 

// expected decrypt_complete
initial
begin
	decrypt_complete_expected = 1'bX;
end 
// generate trigger
always @(address_out_expected or address_out or compute_reset_expected or compute_reset or compute_start_expected or compute_start or data_out_expected or data_out or decrypt_complete_expected or decrypt_complete or init_reset_expected or init_reset or init_start_expected or init_start or shuffle_reset_expected or shuffle_reset or shuffle_start_expected or shuffle_start or wren_out_expected or wren_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected address_out = %b | expected compute_reset = %b | expected compute_start = %b | expected data_out = %b | expected decrypt_complete = %b | expected init_reset = %b | expected init_start = %b | expected shuffle_reset = %b | expected shuffle_start = %b | expected wren_out = %b | ",address_out_expected_prev,compute_reset_expected_prev,compute_start_expected_prev,data_out_expected_prev,decrypt_complete_expected_prev,init_reset_expected_prev,init_start_expected_prev,shuffle_reset_expected_prev,shuffle_start_expected_prev,wren_out_expected_prev);
	$display("| real address_out = %b | real compute_reset = %b | real compute_start = %b | real data_out = %b | real decrypt_complete = %b | real init_reset = %b | real init_start = %b | real shuffle_reset = %b | real shuffle_start = %b | real wren_out = %b | ",address_out_prev,compute_reset_prev,compute_start_prev,data_out_prev,decrypt_complete_prev,init_reset_prev,init_start_prev,shuffle_reset_prev,shuffle_start_prev,wren_out_prev);
`endif
	if (
		( address_out_expected_prev[0] !== 1'bx ) && ( address_out_prev[0] !== address_out_expected_prev[0] )
		&& ((address_out_expected_prev[0] !== last_address_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_out_expected_prev);
		$display ("     Real value = %b", address_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_out_exp[0] = address_out_expected_prev[0];
	end
	if (
		( address_out_expected_prev[1] !== 1'bx ) && ( address_out_prev[1] !== address_out_expected_prev[1] )
		&& ((address_out_expected_prev[1] !== last_address_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_out_expected_prev);
		$display ("     Real value = %b", address_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_out_exp[1] = address_out_expected_prev[1];
	end
	if (
		( address_out_expected_prev[2] !== 1'bx ) && ( address_out_prev[2] !== address_out_expected_prev[2] )
		&& ((address_out_expected_prev[2] !== last_address_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_out_expected_prev);
		$display ("     Real value = %b", address_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_out_exp[2] = address_out_expected_prev[2];
	end
	if (
		( address_out_expected_prev[3] !== 1'bx ) && ( address_out_prev[3] !== address_out_expected_prev[3] )
		&& ((address_out_expected_prev[3] !== last_address_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_out_expected_prev);
		$display ("     Real value = %b", address_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_out_exp[3] = address_out_expected_prev[3];
	end
	if (
		( address_out_expected_prev[4] !== 1'bx ) && ( address_out_prev[4] !== address_out_expected_prev[4] )
		&& ((address_out_expected_prev[4] !== last_address_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_out_expected_prev);
		$display ("     Real value = %b", address_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_out_exp[4] = address_out_expected_prev[4];
	end
	if (
		( address_out_expected_prev[5] !== 1'bx ) && ( address_out_prev[5] !== address_out_expected_prev[5] )
		&& ((address_out_expected_prev[5] !== last_address_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_out_expected_prev);
		$display ("     Real value = %b", address_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_out_exp[5] = address_out_expected_prev[5];
	end
	if (
		( address_out_expected_prev[6] !== 1'bx ) && ( address_out_prev[6] !== address_out_expected_prev[6] )
		&& ((address_out_expected_prev[6] !== last_address_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_out_expected_prev);
		$display ("     Real value = %b", address_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_out_exp[6] = address_out_expected_prev[6];
	end
	if (
		( address_out_expected_prev[7] !== 1'bx ) && ( address_out_prev[7] !== address_out_expected_prev[7] )
		&& ((address_out_expected_prev[7] !== last_address_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_out_expected_prev);
		$display ("     Real value = %b", address_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_out_exp[7] = address_out_expected_prev[7];
	end
	if (
		( compute_reset_expected_prev !== 1'bx ) && ( compute_reset_prev !== compute_reset_expected_prev )
		&& ((compute_reset_expected_prev !== last_compute_reset_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port compute_reset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", compute_reset_expected_prev);
		$display ("     Real value = %b", compute_reset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_compute_reset_exp = compute_reset_expected_prev;
	end
	if (
		( compute_start_expected_prev !== 1'bx ) && ( compute_start_prev !== compute_start_expected_prev )
		&& ((compute_start_expected_prev !== last_compute_start_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port compute_start :: @time = %t",  $realtime);
		$display ("     Expected value = %b", compute_start_expected_prev);
		$display ("     Real value = %b", compute_start_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_compute_start_exp = compute_start_expected_prev;
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( decrypt_complete_expected_prev !== 1'bx ) && ( decrypt_complete_prev !== decrypt_complete_expected_prev )
		&& ((decrypt_complete_expected_prev !== last_decrypt_complete_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port decrypt_complete :: @time = %t",  $realtime);
		$display ("     Expected value = %b", decrypt_complete_expected_prev);
		$display ("     Real value = %b", decrypt_complete_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_decrypt_complete_exp = decrypt_complete_expected_prev;
	end
	if (
		( init_reset_expected_prev !== 1'bx ) && ( init_reset_prev !== init_reset_expected_prev )
		&& ((init_reset_expected_prev !== last_init_reset_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port init_reset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", init_reset_expected_prev);
		$display ("     Real value = %b", init_reset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_init_reset_exp = init_reset_expected_prev;
	end
	if (
		( init_start_expected_prev !== 1'bx ) && ( init_start_prev !== init_start_expected_prev )
		&& ((init_start_expected_prev !== last_init_start_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port init_start :: @time = %t",  $realtime);
		$display ("     Expected value = %b", init_start_expected_prev);
		$display ("     Real value = %b", init_start_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_init_start_exp = init_start_expected_prev;
	end
	if (
		( shuffle_reset_expected_prev !== 1'bx ) && ( shuffle_reset_prev !== shuffle_reset_expected_prev )
		&& ((shuffle_reset_expected_prev !== last_shuffle_reset_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shuffle_reset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shuffle_reset_expected_prev);
		$display ("     Real value = %b", shuffle_reset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_shuffle_reset_exp = shuffle_reset_expected_prev;
	end
	if (
		( shuffle_start_expected_prev !== 1'bx ) && ( shuffle_start_prev !== shuffle_start_expected_prev )
		&& ((shuffle_start_expected_prev !== last_shuffle_start_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shuffle_start :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shuffle_start_expected_prev);
		$display ("     Real value = %b", shuffle_start_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_shuffle_start_exp = shuffle_start_expected_prev;
	end
	if (
		( wren_out_expected_prev !== 1'bx ) && ( wren_out_prev !== wren_out_expected_prev )
		&& ((wren_out_expected_prev !== last_wren_out_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wren_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wren_out_expected_prev);
		$display ("     Real value = %b", wren_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_wren_out_exp = wren_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decrypt_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address_compute;
reg [7:0] address_init;
reg [7:0] address_shuffle;
reg clk;
reg compute_complete;
reg [7:0] data_compute;
reg [7:0] data_init;
reg [7:0] data_shuffle;
reg decrypt_start;
reg init_complete;
reg reset;
reg shuffle_complete;
reg wren_compute;
reg wren_init;
reg wren_shuffle;
// wires                                               
wire [7:0] address_out;
wire compute_reset;
wire compute_start;
wire [7:0] data_out;
wire decrypt_complete;
wire init_reset;
wire init_start;
wire shuffle_reset;
wire shuffle_start;
wire wren_out;

wire sampler;                             

// assign statements (if any)                          
decrypt i1 (
// port map - connection between master ports and signals/registers   
	.address_compute(address_compute),
	.address_init(address_init),
	.address_out(address_out),
	.address_shuffle(address_shuffle),
	.clk(clk),
	.compute_complete(compute_complete),
	.compute_reset(compute_reset),
	.compute_start(compute_start),
	.data_compute(data_compute),
	.data_init(data_init),
	.data_out(data_out),
	.data_shuffle(data_shuffle),
	.decrypt_complete(decrypt_complete),
	.decrypt_start(decrypt_start),
	.init_complete(init_complete),
	.init_reset(init_reset),
	.init_start(init_start),
	.reset(reset),
	.shuffle_complete(shuffle_complete),
	.shuffle_reset(shuffle_reset),
	.shuffle_start(shuffle_start),
	.wren_compute(wren_compute),
	.wren_init(wren_init),
	.wren_out(wren_out),
	.wren_shuffle(wren_shuffle)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// address_compute[ 7 ]
initial
begin
	address_compute[7] = 1'b0;
end 
// address_compute[ 6 ]
initial
begin
	address_compute[6] = 1'b1;
end 
// address_compute[ 5 ]
initial
begin
	address_compute[5] = 1'b0;
end 
// address_compute[ 4 ]
initial
begin
	address_compute[4] = 1'b0;
end 
// address_compute[ 3 ]
initial
begin
	address_compute[3] = 1'b0;
end 
// address_compute[ 2 ]
initial
begin
	address_compute[2] = 1'b0;
end 
// address_compute[ 1 ]
initial
begin
	address_compute[1] = 1'b1;
end 
// address_compute[ 0 ]
initial
begin
	address_compute[0] = 1'b1;
end 
// address_init[ 7 ]
initial
begin
	address_init[7] = 1'b0;
end 
// address_init[ 6 ]
initial
begin
	address_init[6] = 1'b1;
end 
// address_init[ 5 ]
initial
begin
	address_init[5] = 1'b0;
end 
// address_init[ 4 ]
initial
begin
	address_init[4] = 1'b0;
end 
// address_init[ 3 ]
initial
begin
	address_init[3] = 1'b1;
end 
// address_init[ 2 ]
initial
begin
	address_init[2] = 1'b0;
end 
// address_init[ 1 ]
initial
begin
	address_init[1] = 1'b0;
end 
// address_init[ 0 ]
initial
begin
	address_init[0] = 1'b1;
end 
// address_shuffle[ 7 ]
initial
begin
	address_shuffle[7] = 1'b0;
end 
// address_shuffle[ 6 ]
initial
begin
	address_shuffle[6] = 1'b1;
end 
// address_shuffle[ 5 ]
initial
begin
	address_shuffle[5] = 1'b0;
end 
// address_shuffle[ 4 ]
initial
begin
	address_shuffle[4] = 1'b1;
end 
// address_shuffle[ 3 ]
initial
begin
	address_shuffle[3] = 1'b0;
end 
// address_shuffle[ 2 ]
initial
begin
	address_shuffle[2] = 1'b0;
end 
// address_shuffle[ 1 ]
initial
begin
	address_shuffle[1] = 1'b1;
end 
// address_shuffle[ 0 ]
initial
begin
	address_shuffle[0] = 1'b1;
end 
// data_init[ 7 ]
initial
begin
	data_init[7] = 1'b0;
end 
// data_init[ 6 ]
initial
begin
	data_init[6] = 1'b0;
end 
// data_init[ 5 ]
initial
begin
	data_init[5] = 1'b1;
end 
// data_init[ 4 ]
initial
begin
	data_init[4] = 1'b1;
end 
// data_init[ 3 ]
initial
begin
	data_init[3] = 1'b0;
end 
// data_init[ 2 ]
initial
begin
	data_init[2] = 1'b0;
end 
// data_init[ 1 ]
initial
begin
	data_init[1] = 1'b0;
end 
// data_init[ 0 ]
initial
begin
	data_init[0] = 1'b1;
end 
// data_shuffle[ 7 ]
initial
begin
	data_shuffle[7] = 1'b0;
end 
// data_shuffle[ 6 ]
initial
begin
	data_shuffle[6] = 1'b0;
end 
// data_shuffle[ 5 ]
initial
begin
	data_shuffle[5] = 1'b1;
end 
// data_shuffle[ 4 ]
initial
begin
	data_shuffle[4] = 1'b1;
end 
// data_shuffle[ 3 ]
initial
begin
	data_shuffle[3] = 1'b0;
end 
// data_shuffle[ 2 ]
initial
begin
	data_shuffle[2] = 1'b0;
end 
// data_shuffle[ 1 ]
initial
begin
	data_shuffle[1] = 1'b1;
end 
// data_shuffle[ 0 ]
initial
begin
	data_shuffle[0] = 1'b0;
end 
// data_compute[ 7 ]
initial
begin
	data_compute[7] = 1'b0;
end 
// data_compute[ 6 ]
initial
begin
	data_compute[6] = 1'b0;
end 
// data_compute[ 5 ]
initial
begin
	data_compute[5] = 1'b1;
end 
// data_compute[ 4 ]
initial
begin
	data_compute[4] = 1'b1;
end 
// data_compute[ 3 ]
initial
begin
	data_compute[3] = 1'b0;
end 
// data_compute[ 2 ]
initial
begin
	data_compute[2] = 1'b0;
end 
// data_compute[ 1 ]
initial
begin
	data_compute[1] = 1'b1;
end 
// data_compute[ 0 ]
initial
begin
	data_compute[0] = 1'b1;
end 

// decrypt_start
initial
begin
	decrypt_start = 1'b0;
	decrypt_start = #20000 1'b1;
	decrypt_start = #30000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #970000 1'b1;
	reset = #20000 1'b0;
end 

// wren_compute
initial
begin
	wren_compute = 1'b0;
end 

// wren_init
initial
begin
	wren_init = 1'b0;
end 

// init_complete
initial
begin
	init_complete = 1'b0;
	init_complete = #260000 1'b1;
	init_complete = #30000 1'b0;
end 

// shuffle_complete
initial
begin
	shuffle_complete = 1'b0;
	shuffle_complete = #490000 1'b1;
	shuffle_complete = #20000 1'b0;
end 

// compute_complete
initial
begin
	compute_complete = 1'b0;
	compute_complete = #750000 1'b1;
	compute_complete = #10000 1'b0;
end 

// wren_shuffle
initial
begin
	wren_shuffle = 1'b0;
end 

decrypt_vlg_sample_tst tb_sample (
	.address_compute(address_compute),
	.address_init(address_init),
	.address_shuffle(address_shuffle),
	.clk(clk),
	.compute_complete(compute_complete),
	.data_compute(data_compute),
	.data_init(data_init),
	.data_shuffle(data_shuffle),
	.decrypt_start(decrypt_start),
	.init_complete(init_complete),
	.reset(reset),
	.shuffle_complete(shuffle_complete),
	.wren_compute(wren_compute),
	.wren_init(wren_init),
	.wren_shuffle(wren_shuffle),
	.sampler_tx(sampler)
);

decrypt_vlg_check_tst tb_out(
	.address_out(address_out),
	.compute_reset(compute_reset),
	.compute_start(compute_start),
	.data_out(data_out),
	.decrypt_complete(decrypt_complete),
	.init_reset(init_reset),
	.init_start(init_start),
	.shuffle_reset(shuffle_reset),
	.shuffle_start(shuffle_start),
	.wren_out(wren_out),
	.sampler_rx(sampler)
);
endmodule

