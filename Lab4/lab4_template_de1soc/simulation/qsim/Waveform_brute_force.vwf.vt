// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/09/2020 11:11:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    brute_force
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module brute_force_vlg_sample_tst(
	clk,
	compute_complete,
	decrypt_msg_data,
	start,
	wren_start,
	sampler_tx
);
input  clk;
input  compute_complete;
input [7:0] decrypt_msg_data;
input  start;
input  wren_start;
output sampler_tx;

reg sample;
time current_time;
always @(clk or compute_complete or decrypt_msg_data or start or wren_start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module brute_force_vlg_check_tst (
	HEX_out,
	LED_sel,
	reset_decrypt,
	secret_key,
	start_decrypt,
	sampler_rx
);
input [23:0] HEX_out;
input [1:0] LED_sel;
input  reset_decrypt;
input [23:0] secret_key;
input  start_decrypt;
input sampler_rx;

reg [23:0] HEX_out_expected;
reg [1:0] LED_sel_expected;
reg  reset_decrypt_expected;
reg [23:0] secret_key_expected;
reg  start_decrypt_expected;

reg [23:0] HEX_out_prev;
reg [1:0] LED_sel_prev;
reg  reset_decrypt_prev;
reg [23:0] secret_key_prev;
reg  start_decrypt_prev;

reg [23:0] HEX_out_expected_prev;
reg [1:0] LED_sel_expected_prev;
reg  reset_decrypt_expected_prev;
reg [23:0] secret_key_expected_prev;
reg  start_decrypt_expected_prev;

reg [23:0] last_HEX_out_exp;
reg [1:0] last_LED_sel_exp;
reg  last_reset_decrypt_exp;
reg [23:0] last_secret_key_exp;
reg  last_start_decrypt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX_out_prev = HEX_out;
	LED_sel_prev = LED_sel;
	reset_decrypt_prev = reset_decrypt;
	secret_key_prev = secret_key;
	start_decrypt_prev = start_decrypt;
end

// update expected /o prevs

always @(trigger)
begin
	HEX_out_expected_prev = HEX_out_expected;
	LED_sel_expected_prev = LED_sel_expected;
	reset_decrypt_expected_prev = reset_decrypt_expected;
	secret_key_expected_prev = secret_key_expected;
	start_decrypt_expected_prev = start_decrypt_expected;
end



// expected start_decrypt
initial
begin
	start_decrypt_expected = 1'bX;
end 

// expected reset_decrypt
initial
begin
	reset_decrypt_expected = 1'bX;
end 
// expected secret_key[ 23 ]
initial
begin
	secret_key_expected[23] = 1'bX;
end 
// expected secret_key[ 22 ]
initial
begin
	secret_key_expected[22] = 1'bX;
end 
// expected secret_key[ 21 ]
initial
begin
	secret_key_expected[21] = 1'bX;
end 
// expected secret_key[ 20 ]
initial
begin
	secret_key_expected[20] = 1'bX;
end 
// expected secret_key[ 19 ]
initial
begin
	secret_key_expected[19] = 1'bX;
end 
// expected secret_key[ 18 ]
initial
begin
	secret_key_expected[18] = 1'bX;
end 
// expected secret_key[ 17 ]
initial
begin
	secret_key_expected[17] = 1'bX;
end 
// expected secret_key[ 16 ]
initial
begin
	secret_key_expected[16] = 1'bX;
end 
// expected secret_key[ 15 ]
initial
begin
	secret_key_expected[15] = 1'bX;
end 
// expected secret_key[ 14 ]
initial
begin
	secret_key_expected[14] = 1'bX;
end 
// expected secret_key[ 13 ]
initial
begin
	secret_key_expected[13] = 1'bX;
end 
// expected secret_key[ 12 ]
initial
begin
	secret_key_expected[12] = 1'bX;
end 
// expected secret_key[ 11 ]
initial
begin
	secret_key_expected[11] = 1'bX;
end 
// expected secret_key[ 10 ]
initial
begin
	secret_key_expected[10] = 1'bX;
end 
// expected secret_key[ 9 ]
initial
begin
	secret_key_expected[9] = 1'bX;
end 
// expected secret_key[ 8 ]
initial
begin
	secret_key_expected[8] = 1'bX;
end 
// expected secret_key[ 7 ]
initial
begin
	secret_key_expected[7] = 1'bX;
end 
// expected secret_key[ 6 ]
initial
begin
	secret_key_expected[6] = 1'bX;
end 
// expected secret_key[ 5 ]
initial
begin
	secret_key_expected[5] = 1'bX;
end 
// expected secret_key[ 4 ]
initial
begin
	secret_key_expected[4] = 1'bX;
end 
// expected secret_key[ 3 ]
initial
begin
	secret_key_expected[3] = 1'bX;
end 
// expected secret_key[ 2 ]
initial
begin
	secret_key_expected[2] = 1'bX;
end 
// expected secret_key[ 1 ]
initial
begin
	secret_key_expected[1] = 1'bX;
end 
// expected secret_key[ 0 ]
initial
begin
	secret_key_expected[0] = 1'bX;
end 
// expected LED_sel[ 1 ]
initial
begin
	LED_sel_expected[1] = 1'bX;
end 
// expected LED_sel[ 0 ]
initial
begin
	LED_sel_expected[0] = 1'bX;
end 
// expected HEX_out[ 23 ]
initial
begin
	HEX_out_expected[23] = 1'bX;
end 
// expected HEX_out[ 22 ]
initial
begin
	HEX_out_expected[22] = 1'bX;
end 
// expected HEX_out[ 21 ]
initial
begin
	HEX_out_expected[21] = 1'bX;
end 
// expected HEX_out[ 20 ]
initial
begin
	HEX_out_expected[20] = 1'bX;
end 
// expected HEX_out[ 19 ]
initial
begin
	HEX_out_expected[19] = 1'bX;
end 
// expected HEX_out[ 18 ]
initial
begin
	HEX_out_expected[18] = 1'bX;
end 
// expected HEX_out[ 17 ]
initial
begin
	HEX_out_expected[17] = 1'bX;
end 
// expected HEX_out[ 16 ]
initial
begin
	HEX_out_expected[16] = 1'bX;
end 
// expected HEX_out[ 15 ]
initial
begin
	HEX_out_expected[15] = 1'bX;
end 
// expected HEX_out[ 14 ]
initial
begin
	HEX_out_expected[14] = 1'bX;
end 
// expected HEX_out[ 13 ]
initial
begin
	HEX_out_expected[13] = 1'bX;
end 
// expected HEX_out[ 12 ]
initial
begin
	HEX_out_expected[12] = 1'bX;
end 
// expected HEX_out[ 11 ]
initial
begin
	HEX_out_expected[11] = 1'bX;
end 
// expected HEX_out[ 10 ]
initial
begin
	HEX_out_expected[10] = 1'bX;
end 
// expected HEX_out[ 9 ]
initial
begin
	HEX_out_expected[9] = 1'bX;
end 
// expected HEX_out[ 8 ]
initial
begin
	HEX_out_expected[8] = 1'bX;
end 
// expected HEX_out[ 7 ]
initial
begin
	HEX_out_expected[7] = 1'bX;
end 
// expected HEX_out[ 6 ]
initial
begin
	HEX_out_expected[6] = 1'bX;
end 
// expected HEX_out[ 5 ]
initial
begin
	HEX_out_expected[5] = 1'bX;
end 
// expected HEX_out[ 4 ]
initial
begin
	HEX_out_expected[4] = 1'bX;
end 
// expected HEX_out[ 3 ]
initial
begin
	HEX_out_expected[3] = 1'bX;
end 
// expected HEX_out[ 2 ]
initial
begin
	HEX_out_expected[2] = 1'bX;
end 
// expected HEX_out[ 1 ]
initial
begin
	HEX_out_expected[1] = 1'bX;
end 
// expected HEX_out[ 0 ]
initial
begin
	HEX_out_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX_out_expected or HEX_out or LED_sel_expected or LED_sel or reset_decrypt_expected or reset_decrypt or secret_key_expected or secret_key or start_decrypt_expected or start_decrypt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX_out = %b | expected LED_sel = %b | expected reset_decrypt = %b | expected secret_key = %b | expected start_decrypt = %b | ",HEX_out_expected_prev,LED_sel_expected_prev,reset_decrypt_expected_prev,secret_key_expected_prev,start_decrypt_expected_prev);
	$display("| real HEX_out = %b | real LED_sel = %b | real reset_decrypt = %b | real secret_key = %b | real start_decrypt = %b | ",HEX_out_prev,LED_sel_prev,reset_decrypt_prev,secret_key_prev,start_decrypt_prev);
`endif
	if (
		( HEX_out_expected_prev[0] !== 1'bx ) && ( HEX_out_prev[0] !== HEX_out_expected_prev[0] )
		&& ((HEX_out_expected_prev[0] !== last_HEX_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[0] = HEX_out_expected_prev[0];
	end
	if (
		( HEX_out_expected_prev[1] !== 1'bx ) && ( HEX_out_prev[1] !== HEX_out_expected_prev[1] )
		&& ((HEX_out_expected_prev[1] !== last_HEX_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[1] = HEX_out_expected_prev[1];
	end
	if (
		( HEX_out_expected_prev[2] !== 1'bx ) && ( HEX_out_prev[2] !== HEX_out_expected_prev[2] )
		&& ((HEX_out_expected_prev[2] !== last_HEX_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[2] = HEX_out_expected_prev[2];
	end
	if (
		( HEX_out_expected_prev[3] !== 1'bx ) && ( HEX_out_prev[3] !== HEX_out_expected_prev[3] )
		&& ((HEX_out_expected_prev[3] !== last_HEX_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[3] = HEX_out_expected_prev[3];
	end
	if (
		( HEX_out_expected_prev[4] !== 1'bx ) && ( HEX_out_prev[4] !== HEX_out_expected_prev[4] )
		&& ((HEX_out_expected_prev[4] !== last_HEX_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[4] = HEX_out_expected_prev[4];
	end
	if (
		( HEX_out_expected_prev[5] !== 1'bx ) && ( HEX_out_prev[5] !== HEX_out_expected_prev[5] )
		&& ((HEX_out_expected_prev[5] !== last_HEX_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[5] = HEX_out_expected_prev[5];
	end
	if (
		( HEX_out_expected_prev[6] !== 1'bx ) && ( HEX_out_prev[6] !== HEX_out_expected_prev[6] )
		&& ((HEX_out_expected_prev[6] !== last_HEX_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[6] = HEX_out_expected_prev[6];
	end
	if (
		( HEX_out_expected_prev[7] !== 1'bx ) && ( HEX_out_prev[7] !== HEX_out_expected_prev[7] )
		&& ((HEX_out_expected_prev[7] !== last_HEX_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[7] = HEX_out_expected_prev[7];
	end
	if (
		( HEX_out_expected_prev[8] !== 1'bx ) && ( HEX_out_prev[8] !== HEX_out_expected_prev[8] )
		&& ((HEX_out_expected_prev[8] !== last_HEX_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[8] = HEX_out_expected_prev[8];
	end
	if (
		( HEX_out_expected_prev[9] !== 1'bx ) && ( HEX_out_prev[9] !== HEX_out_expected_prev[9] )
		&& ((HEX_out_expected_prev[9] !== last_HEX_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[9] = HEX_out_expected_prev[9];
	end
	if (
		( HEX_out_expected_prev[10] !== 1'bx ) && ( HEX_out_prev[10] !== HEX_out_expected_prev[10] )
		&& ((HEX_out_expected_prev[10] !== last_HEX_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[10] = HEX_out_expected_prev[10];
	end
	if (
		( HEX_out_expected_prev[11] !== 1'bx ) && ( HEX_out_prev[11] !== HEX_out_expected_prev[11] )
		&& ((HEX_out_expected_prev[11] !== last_HEX_out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[11] = HEX_out_expected_prev[11];
	end
	if (
		( HEX_out_expected_prev[12] !== 1'bx ) && ( HEX_out_prev[12] !== HEX_out_expected_prev[12] )
		&& ((HEX_out_expected_prev[12] !== last_HEX_out_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[12] = HEX_out_expected_prev[12];
	end
	if (
		( HEX_out_expected_prev[13] !== 1'bx ) && ( HEX_out_prev[13] !== HEX_out_expected_prev[13] )
		&& ((HEX_out_expected_prev[13] !== last_HEX_out_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[13] = HEX_out_expected_prev[13];
	end
	if (
		( HEX_out_expected_prev[14] !== 1'bx ) && ( HEX_out_prev[14] !== HEX_out_expected_prev[14] )
		&& ((HEX_out_expected_prev[14] !== last_HEX_out_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[14] = HEX_out_expected_prev[14];
	end
	if (
		( HEX_out_expected_prev[15] !== 1'bx ) && ( HEX_out_prev[15] !== HEX_out_expected_prev[15] )
		&& ((HEX_out_expected_prev[15] !== last_HEX_out_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[15] = HEX_out_expected_prev[15];
	end
	if (
		( HEX_out_expected_prev[16] !== 1'bx ) && ( HEX_out_prev[16] !== HEX_out_expected_prev[16] )
		&& ((HEX_out_expected_prev[16] !== last_HEX_out_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[16] = HEX_out_expected_prev[16];
	end
	if (
		( HEX_out_expected_prev[17] !== 1'bx ) && ( HEX_out_prev[17] !== HEX_out_expected_prev[17] )
		&& ((HEX_out_expected_prev[17] !== last_HEX_out_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[17] = HEX_out_expected_prev[17];
	end
	if (
		( HEX_out_expected_prev[18] !== 1'bx ) && ( HEX_out_prev[18] !== HEX_out_expected_prev[18] )
		&& ((HEX_out_expected_prev[18] !== last_HEX_out_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[18] = HEX_out_expected_prev[18];
	end
	if (
		( HEX_out_expected_prev[19] !== 1'bx ) && ( HEX_out_prev[19] !== HEX_out_expected_prev[19] )
		&& ((HEX_out_expected_prev[19] !== last_HEX_out_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[19] = HEX_out_expected_prev[19];
	end
	if (
		( HEX_out_expected_prev[20] !== 1'bx ) && ( HEX_out_prev[20] !== HEX_out_expected_prev[20] )
		&& ((HEX_out_expected_prev[20] !== last_HEX_out_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[20] = HEX_out_expected_prev[20];
	end
	if (
		( HEX_out_expected_prev[21] !== 1'bx ) && ( HEX_out_prev[21] !== HEX_out_expected_prev[21] )
		&& ((HEX_out_expected_prev[21] !== last_HEX_out_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[21] = HEX_out_expected_prev[21];
	end
	if (
		( HEX_out_expected_prev[22] !== 1'bx ) && ( HEX_out_prev[22] !== HEX_out_expected_prev[22] )
		&& ((HEX_out_expected_prev[22] !== last_HEX_out_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[22] = HEX_out_expected_prev[22];
	end
	if (
		( HEX_out_expected_prev[23] !== 1'bx ) && ( HEX_out_prev[23] !== HEX_out_expected_prev[23] )
		&& ((HEX_out_expected_prev[23] !== last_HEX_out_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_out_expected_prev);
		$display ("     Real value = %b", HEX_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX_out_exp[23] = HEX_out_expected_prev[23];
	end
	if (
		( LED_sel_expected_prev[0] !== 1'bx ) && ( LED_sel_prev[0] !== LED_sel_expected_prev[0] )
		&& ((LED_sel_expected_prev[0] !== last_LED_sel_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_sel_expected_prev);
		$display ("     Real value = %b", LED_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_sel_exp[0] = LED_sel_expected_prev[0];
	end
	if (
		( LED_sel_expected_prev[1] !== 1'bx ) && ( LED_sel_prev[1] !== LED_sel_expected_prev[1] )
		&& ((LED_sel_expected_prev[1] !== last_LED_sel_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_sel_expected_prev);
		$display ("     Real value = %b", LED_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_sel_exp[1] = LED_sel_expected_prev[1];
	end
	if (
		( reset_decrypt_expected_prev !== 1'bx ) && ( reset_decrypt_prev !== reset_decrypt_expected_prev )
		&& ((reset_decrypt_expected_prev !== last_reset_decrypt_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset_decrypt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_decrypt_expected_prev);
		$display ("     Real value = %b", reset_decrypt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_reset_decrypt_exp = reset_decrypt_expected_prev;
	end
	if (
		( secret_key_expected_prev[0] !== 1'bx ) && ( secret_key_prev[0] !== secret_key_expected_prev[0] )
		&& ((secret_key_expected_prev[0] !== last_secret_key_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[0] = secret_key_expected_prev[0];
	end
	if (
		( secret_key_expected_prev[1] !== 1'bx ) && ( secret_key_prev[1] !== secret_key_expected_prev[1] )
		&& ((secret_key_expected_prev[1] !== last_secret_key_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[1] = secret_key_expected_prev[1];
	end
	if (
		( secret_key_expected_prev[2] !== 1'bx ) && ( secret_key_prev[2] !== secret_key_expected_prev[2] )
		&& ((secret_key_expected_prev[2] !== last_secret_key_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[2] = secret_key_expected_prev[2];
	end
	if (
		( secret_key_expected_prev[3] !== 1'bx ) && ( secret_key_prev[3] !== secret_key_expected_prev[3] )
		&& ((secret_key_expected_prev[3] !== last_secret_key_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[3] = secret_key_expected_prev[3];
	end
	if (
		( secret_key_expected_prev[4] !== 1'bx ) && ( secret_key_prev[4] !== secret_key_expected_prev[4] )
		&& ((secret_key_expected_prev[4] !== last_secret_key_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[4] = secret_key_expected_prev[4];
	end
	if (
		( secret_key_expected_prev[5] !== 1'bx ) && ( secret_key_prev[5] !== secret_key_expected_prev[5] )
		&& ((secret_key_expected_prev[5] !== last_secret_key_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[5] = secret_key_expected_prev[5];
	end
	if (
		( secret_key_expected_prev[6] !== 1'bx ) && ( secret_key_prev[6] !== secret_key_expected_prev[6] )
		&& ((secret_key_expected_prev[6] !== last_secret_key_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[6] = secret_key_expected_prev[6];
	end
	if (
		( secret_key_expected_prev[7] !== 1'bx ) && ( secret_key_prev[7] !== secret_key_expected_prev[7] )
		&& ((secret_key_expected_prev[7] !== last_secret_key_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[7] = secret_key_expected_prev[7];
	end
	if (
		( secret_key_expected_prev[8] !== 1'bx ) && ( secret_key_prev[8] !== secret_key_expected_prev[8] )
		&& ((secret_key_expected_prev[8] !== last_secret_key_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[8] = secret_key_expected_prev[8];
	end
	if (
		( secret_key_expected_prev[9] !== 1'bx ) && ( secret_key_prev[9] !== secret_key_expected_prev[9] )
		&& ((secret_key_expected_prev[9] !== last_secret_key_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[9] = secret_key_expected_prev[9];
	end
	if (
		( secret_key_expected_prev[10] !== 1'bx ) && ( secret_key_prev[10] !== secret_key_expected_prev[10] )
		&& ((secret_key_expected_prev[10] !== last_secret_key_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[10] = secret_key_expected_prev[10];
	end
	if (
		( secret_key_expected_prev[11] !== 1'bx ) && ( secret_key_prev[11] !== secret_key_expected_prev[11] )
		&& ((secret_key_expected_prev[11] !== last_secret_key_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[11] = secret_key_expected_prev[11];
	end
	if (
		( secret_key_expected_prev[12] !== 1'bx ) && ( secret_key_prev[12] !== secret_key_expected_prev[12] )
		&& ((secret_key_expected_prev[12] !== last_secret_key_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[12] = secret_key_expected_prev[12];
	end
	if (
		( secret_key_expected_prev[13] !== 1'bx ) && ( secret_key_prev[13] !== secret_key_expected_prev[13] )
		&& ((secret_key_expected_prev[13] !== last_secret_key_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[13] = secret_key_expected_prev[13];
	end
	if (
		( secret_key_expected_prev[14] !== 1'bx ) && ( secret_key_prev[14] !== secret_key_expected_prev[14] )
		&& ((secret_key_expected_prev[14] !== last_secret_key_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[14] = secret_key_expected_prev[14];
	end
	if (
		( secret_key_expected_prev[15] !== 1'bx ) && ( secret_key_prev[15] !== secret_key_expected_prev[15] )
		&& ((secret_key_expected_prev[15] !== last_secret_key_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[15] = secret_key_expected_prev[15];
	end
	if (
		( secret_key_expected_prev[16] !== 1'bx ) && ( secret_key_prev[16] !== secret_key_expected_prev[16] )
		&& ((secret_key_expected_prev[16] !== last_secret_key_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[16] = secret_key_expected_prev[16];
	end
	if (
		( secret_key_expected_prev[17] !== 1'bx ) && ( secret_key_prev[17] !== secret_key_expected_prev[17] )
		&& ((secret_key_expected_prev[17] !== last_secret_key_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[17] = secret_key_expected_prev[17];
	end
	if (
		( secret_key_expected_prev[18] !== 1'bx ) && ( secret_key_prev[18] !== secret_key_expected_prev[18] )
		&& ((secret_key_expected_prev[18] !== last_secret_key_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[18] = secret_key_expected_prev[18];
	end
	if (
		( secret_key_expected_prev[19] !== 1'bx ) && ( secret_key_prev[19] !== secret_key_expected_prev[19] )
		&& ((secret_key_expected_prev[19] !== last_secret_key_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[19] = secret_key_expected_prev[19];
	end
	if (
		( secret_key_expected_prev[20] !== 1'bx ) && ( secret_key_prev[20] !== secret_key_expected_prev[20] )
		&& ((secret_key_expected_prev[20] !== last_secret_key_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[20] = secret_key_expected_prev[20];
	end
	if (
		( secret_key_expected_prev[21] !== 1'bx ) && ( secret_key_prev[21] !== secret_key_expected_prev[21] )
		&& ((secret_key_expected_prev[21] !== last_secret_key_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[21] = secret_key_expected_prev[21];
	end
	if (
		( secret_key_expected_prev[22] !== 1'bx ) && ( secret_key_prev[22] !== secret_key_expected_prev[22] )
		&& ((secret_key_expected_prev[22] !== last_secret_key_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[22] = secret_key_expected_prev[22];
	end
	if (
		( secret_key_expected_prev[23] !== 1'bx ) && ( secret_key_prev[23] !== secret_key_expected_prev[23] )
		&& ((secret_key_expected_prev[23] !== last_secret_key_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_expected_prev);
		$display ("     Real value = %b", secret_key_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_secret_key_exp[23] = secret_key_expected_prev[23];
	end
	if (
		( start_decrypt_expected_prev !== 1'bx ) && ( start_decrypt_prev !== start_decrypt_expected_prev )
		&& ((start_decrypt_expected_prev !== last_start_decrypt_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port start_decrypt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", start_decrypt_expected_prev);
		$display ("     Real value = %b", start_decrypt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_start_decrypt_exp = start_decrypt_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module brute_force_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg compute_complete;
reg [7:0] decrypt_msg_data;
reg start;
reg wren_start;
// wires                                               
wire [23:0] HEX_out;
wire [1:0] LED_sel;
wire reset_decrypt;
wire [23:0] secret_key;
wire start_decrypt;

wire sampler;                             

// assign statements (if any)                          
brute_force i1 (
// port map - connection between master ports and signals/registers   
	.HEX_out(HEX_out),
	.LED_sel(LED_sel),
	.clk(clk),
	.compute_complete(compute_complete),
	.decrypt_msg_data(decrypt_msg_data),
	.reset_decrypt(reset_decrypt),
	.secret_key(secret_key),
	.start(start),
	.start_decrypt(start_decrypt),
	.wren_start(wren_start)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #40000 1'b0;
end 

// wren_start
always
begin
	wren_start = 1'b0;
	wren_start = #20000 1'b1;
	#20000;
end 

// compute_complete
initial
begin
	compute_complete = 1'b0;
	compute_complete = #680000 1'b1;
end 
// decrypt_msg_data[ 7 ]
initial
begin
	decrypt_msg_data[7] = 1'b0;
	decrypt_msg_data[7] = #120000 1'b1;
	decrypt_msg_data[7] = #40000 1'b0;
	decrypt_msg_data[7] = #220000 1'b1;
	decrypt_msg_data[7] = #60000 1'b0;
	decrypt_msg_data[7] = #120000 1'b1;
	decrypt_msg_data[7] = #80000 1'b0;
	decrypt_msg_data[7] = #120000 1'b1;
	decrypt_msg_data[7] = #80000 1'b0;
	decrypt_msg_data[7] = #120000 1'b1;
end 
// decrypt_msg_data[ 6 ]
initial
begin
	decrypt_msg_data[6] = 1'b0;
	decrypt_msg_data[6] = #80000 1'b1;
	decrypt_msg_data[6] = #40000 1'b0;
	decrypt_msg_data[6] = #40000 1'b1;
	decrypt_msg_data[6] = #220000 1'b0;
	decrypt_msg_data[6] = #20000 1'b1;
	decrypt_msg_data[6] = #40000 1'b0;
	decrypt_msg_data[6] = #40000 1'b1;
	decrypt_msg_data[6] = #80000 1'b0;
	decrypt_msg_data[6] = #40000 1'b1;
	decrypt_msg_data[6] = #40000 1'b0;
	decrypt_msg_data[6] = #40000 1'b1;
	decrypt_msg_data[6] = #80000 1'b0;
	decrypt_msg_data[6] = #40000 1'b1;
	decrypt_msg_data[6] = #40000 1'b0;
	decrypt_msg_data[6] = #80000 1'b1;
	decrypt_msg_data[6] = #40000 1'b0;
end 
// decrypt_msg_data[ 5 ]
initial
begin
	decrypt_msg_data[5] = 1'b0;
	decrypt_msg_data[5] = #40000 1'b1;
	decrypt_msg_data[5] = #80000 1'b0;
	decrypt_msg_data[5] = #40000 1'b1;
	decrypt_msg_data[5] = #280000 1'b0;
	decrypt_msg_data[5] = #80000 1'b1;
	decrypt_msg_data[5] = #80000 1'b0;
	decrypt_msg_data[5] = #120000 1'b1;
	decrypt_msg_data[5] = #80000 1'b0;
	decrypt_msg_data[5] = #80000 1'b1;
	decrypt_msg_data[5] = #80000 1'b0;
end 
// decrypt_msg_data[ 4 ]
initial
begin
	repeat(2)
	begin
		decrypt_msg_data[4] = 1'b0;
		decrypt_msg_data[4] = #40000 1'b1;
		# 40000;
	end
	decrypt_msg_data[4] = 1'b0;
	decrypt_msg_data[4] = #220000 1'b1;
	decrypt_msg_data[4] = #20000 1'b0;
	decrypt_msg_data[4] = #40000 1'b1;
	decrypt_msg_data[4] = #40000 1'b0;
	decrypt_msg_data[4] = #40000 1'b1;
	decrypt_msg_data[4] = #40000 1'b0;
	decrypt_msg_data[4] = #40000 1'b1;
	# 80000;
	repeat(4)
	begin
		decrypt_msg_data[4] = 1'b0;
		decrypt_msg_data[4] = #40000 1'b1;
		# 40000;
	end
end 
// decrypt_msg_data[ 3 ]
initial
begin
	decrypt_msg_data[3] = 1'b0;
	decrypt_msg_data[3] = #380000 1'b1;
	decrypt_msg_data[3] = #260000 1'b0;
	decrypt_msg_data[3] = #320000 1'b1;
end 
// decrypt_msg_data[ 2 ]
initial
begin
	decrypt_msg_data[2] = 1'b0;
	decrypt_msg_data[2] = #160000 1'b1;
	decrypt_msg_data[2] = #220000 1'b0;
	decrypt_msg_data[2] = #100000 1'b1;
	decrypt_msg_data[2] = #160000 1'b0;
	decrypt_msg_data[2] = #160000 1'b1;
	decrypt_msg_data[2] = #160000 1'b0;
end 
// decrypt_msg_data[ 1 ]
initial
begin
	decrypt_msg_data[1] = 1'b0;
	decrypt_msg_data[1] = #80000 1'b1;
	decrypt_msg_data[1] = #80000 1'b0;
	decrypt_msg_data[1] = #240000 1'b1;
	# 80000;
	repeat(3)
	begin
		decrypt_msg_data[1] = 1'b0;
		decrypt_msg_data[1] = #80000 1'b1;
		# 80000;
	end
	decrypt_msg_data[1] = 1'b0;
end 
// decrypt_msg_data[ 0 ]
initial
begin
	repeat(2)
	begin
		decrypt_msg_data[0] = 1'b0;
		decrypt_msg_data[0] = #40000 1'b1;
		# 40000;
	end
	decrypt_msg_data[0] = 1'b0;
	decrypt_msg_data[0] = #220000 1'b1;
	decrypt_msg_data[0] = #20000 1'b0;
	decrypt_msg_data[0] = #40000 1'b1;
	# 40000;
	repeat(6)
	begin
		decrypt_msg_data[0] = 1'b0;
		decrypt_msg_data[0] = #40000 1'b1;
		# 40000;
	end
	decrypt_msg_data[0] = 1'b0;
end 

brute_force_vlg_sample_tst tb_sample (
	.clk(clk),
	.compute_complete(compute_complete),
	.decrypt_msg_data(decrypt_msg_data),
	.start(start),
	.wren_start(wren_start),
	.sampler_tx(sampler)
);

brute_force_vlg_check_tst tb_out(
	.HEX_out(HEX_out),
	.LED_sel(LED_sel),
	.reset_decrypt(reset_decrypt),
	.secret_key(secret_key),
	.start_decrypt(start_decrypt),
	.sampler_rx(sampler)
);
endmodule

