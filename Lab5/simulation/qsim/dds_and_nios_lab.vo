// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 14.1.0 Build 186 12/03/2014 SJ Web Edition"

// DATE "03/15/2020 18:10:27"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module lfsr (
	clk,
	reset,
	lfsr_out);
input 	clk;
input 	reset;
output 	[4:0] lfsr_out;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \lfsr_out[0]~output_o ;
wire \lfsr_out[1]~output_o ;
wire \lfsr_out[2]~output_o ;
wire \lfsr_out[3]~output_o ;
wire \lfsr_out[4]~output_o ;
wire \clk~input_o ;
wire \reset~input_o ;
wire \lfsr_out~4_combout ;
wire \lfsr_out[4]~reg0_q ;
wire \lfsr_out~3_combout ;
wire \lfsr_out[3]~reg0_q ;
wire \lfsr_out~2_combout ;
wire \lfsr_out[2]~reg0_q ;
wire \lfsr_out~1_combout ;
wire \lfsr_out[1]~reg0_q ;
wire \lfsr_out~0_combout ;
wire \lfsr_out[0]~reg0_q ;


cyclonev_io_obuf \lfsr_out[0]~output (
	.i(\lfsr_out[0]~reg0_q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\lfsr_out[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \lfsr_out[0]~output .bus_hold = "false";
defparam \lfsr_out[0]~output .open_drain_output = "false";
defparam \lfsr_out[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \lfsr_out[1]~output (
	.i(\lfsr_out[1]~reg0_q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\lfsr_out[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \lfsr_out[1]~output .bus_hold = "false";
defparam \lfsr_out[1]~output .open_drain_output = "false";
defparam \lfsr_out[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \lfsr_out[2]~output (
	.i(\lfsr_out[2]~reg0_q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\lfsr_out[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \lfsr_out[2]~output .bus_hold = "false";
defparam \lfsr_out[2]~output .open_drain_output = "false";
defparam \lfsr_out[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \lfsr_out[3]~output (
	.i(\lfsr_out[3]~reg0_q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\lfsr_out[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \lfsr_out[3]~output .bus_hold = "false";
defparam \lfsr_out[3]~output .open_drain_output = "false";
defparam \lfsr_out[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \lfsr_out[4]~output (
	.i(\lfsr_out[4]~reg0_q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\lfsr_out[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \lfsr_out[4]~output .bus_hold = "false";
defparam \lfsr_out[4]~output .open_drain_output = "false";
defparam \lfsr_out[4]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \reset~input (
	.i(reset),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\reset~input_o ));
// synopsys translate_off
defparam \reset~input .bus_hold = "false";
defparam \reset~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \lfsr_out~4 (
// Equation(s):
// \lfsr_out~4_combout  = (!\reset~input_o  & (!\lfsr_out[0]~reg0_q  $ (!\lfsr_out[2]~reg0_q )))

	.dataa(!\lfsr_out[0]~reg0_q ),
	.datab(!\lfsr_out[2]~reg0_q ),
	.datac(!\reset~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\lfsr_out~4_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \lfsr_out~4 .extended_lut = "off";
defparam \lfsr_out~4 .lut_mask = 64'h6060606060606060;
defparam \lfsr_out~4 .shared_arith = "off";
// synopsys translate_on

dffeas \lfsr_out[4]~reg0 (
	.clk(\clk~input_o ),
	.d(\lfsr_out~4_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\lfsr_out[4]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \lfsr_out[4]~reg0 .is_wysiwyg = "true";
defparam \lfsr_out[4]~reg0 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \lfsr_out~3 (
// Equation(s):
// \lfsr_out~3_combout  = (\lfsr_out[4]~reg0_q  & !\reset~input_o )

	.dataa(!\lfsr_out[4]~reg0_q ),
	.datab(!\reset~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\lfsr_out~3_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \lfsr_out~3 .extended_lut = "off";
defparam \lfsr_out~3 .lut_mask = 64'h4444444444444444;
defparam \lfsr_out~3 .shared_arith = "off";
// synopsys translate_on

dffeas \lfsr_out[3]~reg0 (
	.clk(\clk~input_o ),
	.d(\lfsr_out~3_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\lfsr_out[3]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \lfsr_out[3]~reg0 .is_wysiwyg = "true";
defparam \lfsr_out[3]~reg0 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \lfsr_out~2 (
// Equation(s):
// \lfsr_out~2_combout  = (\lfsr_out[3]~reg0_q  & !\reset~input_o )

	.dataa(!\lfsr_out[3]~reg0_q ),
	.datab(!\reset~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\lfsr_out~2_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \lfsr_out~2 .extended_lut = "off";
defparam \lfsr_out~2 .lut_mask = 64'h4444444444444444;
defparam \lfsr_out~2 .shared_arith = "off";
// synopsys translate_on

dffeas \lfsr_out[2]~reg0 (
	.clk(\clk~input_o ),
	.d(\lfsr_out~2_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\lfsr_out[2]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \lfsr_out[2]~reg0 .is_wysiwyg = "true";
defparam \lfsr_out[2]~reg0 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \lfsr_out~1 (
// Equation(s):
// \lfsr_out~1_combout  = (\lfsr_out[2]~reg0_q  & !\reset~input_o )

	.dataa(!\lfsr_out[2]~reg0_q ),
	.datab(!\reset~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\lfsr_out~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \lfsr_out~1 .extended_lut = "off";
defparam \lfsr_out~1 .lut_mask = 64'h4444444444444444;
defparam \lfsr_out~1 .shared_arith = "off";
// synopsys translate_on

dffeas \lfsr_out[1]~reg0 (
	.clk(\clk~input_o ),
	.d(\lfsr_out~1_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\lfsr_out[1]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \lfsr_out[1]~reg0 .is_wysiwyg = "true";
defparam \lfsr_out[1]~reg0 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \lfsr_out~0 (
// Equation(s):
// \lfsr_out~0_combout  = (\reset~input_o ) # (\lfsr_out[1]~reg0_q )

	.dataa(!\lfsr_out[1]~reg0_q ),
	.datab(!\reset~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\lfsr_out~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \lfsr_out~0 .extended_lut = "off";
defparam \lfsr_out~0 .lut_mask = 64'h7777777777777777;
defparam \lfsr_out~0 .shared_arith = "off";
// synopsys translate_on

dffeas \lfsr_out[0]~reg0 (
	.clk(\clk~input_o ),
	.d(\lfsr_out~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\lfsr_out[0]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \lfsr_out[0]~reg0 .is_wysiwyg = "true";
defparam \lfsr_out[0]~reg0 .power_up = "low";
// synopsys translate_on

assign lfsr_out[0] = \lfsr_out[0]~output_o ;

assign lfsr_out[1] = \lfsr_out[1]~output_o ;

assign lfsr_out[2] = \lfsr_out[2]~output_o ;

assign lfsr_out[3] = \lfsr_out[3]~output_o ;

assign lfsr_out[4] = \lfsr_out[4]~output_o ;

endmodule
