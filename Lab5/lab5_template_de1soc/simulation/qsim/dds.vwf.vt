// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/22/2020 19:22:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    waveform_gen
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module waveform_gen_vlg_sample_tst(
	clk,
	en,
	phase_inc,
	reset,
	sampler_tx
);
input  clk;
input  en;
input [31:0] phase_inc;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or en or phase_inc or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module waveform_gen_vlg_check_tst (
	cos_out,
	saw_out,
	sin_out,
	squ_out,
	sampler_rx
);
input [11:0] cos_out;
input [11:0] saw_out;
input [11:0] sin_out;
input [11:0] squ_out;
input sampler_rx;

reg [11:0] cos_out_expected;
reg [11:0] saw_out_expected;
reg [11:0] sin_out_expected;
reg [11:0] squ_out_expected;

reg [11:0] cos_out_prev;
reg [11:0] saw_out_prev;
reg [11:0] sin_out_prev;
reg [11:0] squ_out_prev;

reg [11:0] cos_out_expected_prev;
reg [11:0] saw_out_expected_prev;
reg [11:0] sin_out_expected_prev;
reg [11:0] squ_out_expected_prev;

reg [11:0] last_cos_out_exp;
reg [11:0] last_saw_out_exp;
reg [11:0] last_sin_out_exp;
reg [11:0] last_squ_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	cos_out_prev = cos_out;
	saw_out_prev = saw_out;
	sin_out_prev = sin_out;
	squ_out_prev = squ_out;
end

// update expected /o prevs

always @(trigger)
begin
	cos_out_expected_prev = cos_out_expected;
	saw_out_expected_prev = saw_out_expected;
	sin_out_expected_prev = sin_out_expected;
	squ_out_expected_prev = squ_out_expected;
end


// expected saw_out[ 11 ]
initial
begin
	saw_out_expected[11] = 1'b0;
end 
// expected saw_out[ 10 ]
initial
begin
	saw_out_expected[10] = 1'b0;
end 
// expected saw_out[ 9 ]
initial
begin
	saw_out_expected[9] = 1'b0;
end 
// expected saw_out[ 8 ]
initial
begin
	saw_out_expected[8] = 1'b0;
end 
// expected saw_out[ 7 ]
initial
begin
	saw_out_expected[7] = 1'b0;
end 
// expected saw_out[ 6 ]
initial
begin
	saw_out_expected[6] = 1'b0;
end 
// expected saw_out[ 5 ]
initial
begin
	saw_out_expected[5] = 1'b0;
end 
// expected saw_out[ 4 ]
initial
begin
	saw_out_expected[4] = 1'b0;
end 
// expected saw_out[ 3 ]
initial
begin
	saw_out_expected[3] = 1'b0;
end 
// expected saw_out[ 2 ]
initial
begin
	saw_out_expected[2] = 1'b0;
end 
// expected saw_out[ 1 ]
initial
begin
	saw_out_expected[1] = 1'b0;
end 
// expected saw_out[ 0 ]
initial
begin
	saw_out_expected[0] = 1'b0;
end 
// expected sin_out[ 11 ]
initial
begin
	sin_out_expected[11] = 1'b0;
end 
// expected sin_out[ 10 ]
initial
begin
	sin_out_expected[10] = 1'b0;
end 
// expected sin_out[ 9 ]
initial
begin
	sin_out_expected[9] = 1'b0;
end 
// expected sin_out[ 8 ]
initial
begin
	sin_out_expected[8] = 1'b0;
end 
// expected sin_out[ 7 ]
initial
begin
	sin_out_expected[7] = 1'b0;
end 
// expected sin_out[ 6 ]
initial
begin
	sin_out_expected[6] = 1'b0;
end 
// expected sin_out[ 5 ]
initial
begin
	sin_out_expected[5] = 1'b0;
end 
// expected sin_out[ 4 ]
initial
begin
	sin_out_expected[4] = 1'b0;
end 
// expected sin_out[ 3 ]
initial
begin
	sin_out_expected[3] = 1'b0;
end 
// expected sin_out[ 2 ]
initial
begin
	sin_out_expected[2] = 1'b0;
end 
// expected sin_out[ 1 ]
initial
begin
	sin_out_expected[1] = 1'b0;
end 
// expected sin_out[ 0 ]
initial
begin
	sin_out_expected[0] = 1'b0;
end 
// expected squ_out[ 11 ]
initial
begin
	squ_out_expected[11] = 1'b0;
end 
// expected squ_out[ 10 ]
initial
begin
	squ_out_expected[10] = 1'b0;
end 
// expected squ_out[ 9 ]
initial
begin
	squ_out_expected[9] = 1'b0;
end 
// expected squ_out[ 8 ]
initial
begin
	squ_out_expected[8] = 1'b0;
end 
// expected squ_out[ 7 ]
initial
begin
	squ_out_expected[7] = 1'b0;
end 
// expected squ_out[ 6 ]
initial
begin
	squ_out_expected[6] = 1'b0;
end 
// expected squ_out[ 5 ]
initial
begin
	squ_out_expected[5] = 1'b0;
end 
// expected squ_out[ 4 ]
initial
begin
	squ_out_expected[4] = 1'b0;
end 
// expected squ_out[ 3 ]
initial
begin
	squ_out_expected[3] = 1'b0;
end 
// expected squ_out[ 2 ]
initial
begin
	squ_out_expected[2] = 1'b0;
end 
// expected squ_out[ 1 ]
initial
begin
	squ_out_expected[1] = 1'b0;
end 
// expected squ_out[ 0 ]
initial
begin
	squ_out_expected[0] = 1'b0;
end 
// expected cos_out[ 11 ]
initial
begin
	cos_out_expected[11] = 1'b0;
end 
// expected cos_out[ 10 ]
initial
begin
	cos_out_expected[10] = 1'b0;
end 
// expected cos_out[ 9 ]
initial
begin
	cos_out_expected[9] = 1'b0;
end 
// expected cos_out[ 8 ]
initial
begin
	cos_out_expected[8] = 1'b0;
end 
// expected cos_out[ 7 ]
initial
begin
	cos_out_expected[7] = 1'b0;
end 
// expected cos_out[ 6 ]
initial
begin
	cos_out_expected[6] = 1'b0;
end 
// expected cos_out[ 5 ]
initial
begin
	cos_out_expected[5] = 1'b0;
end 
// expected cos_out[ 4 ]
initial
begin
	cos_out_expected[4] = 1'b0;
end 
// expected cos_out[ 3 ]
initial
begin
	cos_out_expected[3] = 1'b0;
end 
// expected cos_out[ 2 ]
initial
begin
	cos_out_expected[2] = 1'b0;
end 
// expected cos_out[ 1 ]
initial
begin
	cos_out_expected[1] = 1'b0;
end 
// expected cos_out[ 0 ]
initial
begin
	cos_out_expected[0] = 1'b0;
end 
// generate trigger
always @(cos_out_expected or cos_out or saw_out_expected or saw_out or sin_out_expected or sin_out or squ_out_expected or squ_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cos_out = %b | expected saw_out = %b | expected sin_out = %b | expected squ_out = %b | ",cos_out_expected_prev,saw_out_expected_prev,sin_out_expected_prev,squ_out_expected_prev);
	$display("| real cos_out = %b | real saw_out = %b | real sin_out = %b | real squ_out = %b | ",cos_out_prev,saw_out_prev,sin_out_prev,squ_out_prev);
`endif
	if (
		( cos_out_expected_prev[0] !== 1'bx ) && ( cos_out_prev[0] !== cos_out_expected_prev[0] )
		&& ((cos_out_expected_prev[0] !== last_cos_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[0] = cos_out_expected_prev[0];
	end
	if (
		( cos_out_expected_prev[1] !== 1'bx ) && ( cos_out_prev[1] !== cos_out_expected_prev[1] )
		&& ((cos_out_expected_prev[1] !== last_cos_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[1] = cos_out_expected_prev[1];
	end
	if (
		( cos_out_expected_prev[2] !== 1'bx ) && ( cos_out_prev[2] !== cos_out_expected_prev[2] )
		&& ((cos_out_expected_prev[2] !== last_cos_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[2] = cos_out_expected_prev[2];
	end
	if (
		( cos_out_expected_prev[3] !== 1'bx ) && ( cos_out_prev[3] !== cos_out_expected_prev[3] )
		&& ((cos_out_expected_prev[3] !== last_cos_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[3] = cos_out_expected_prev[3];
	end
	if (
		( cos_out_expected_prev[4] !== 1'bx ) && ( cos_out_prev[4] !== cos_out_expected_prev[4] )
		&& ((cos_out_expected_prev[4] !== last_cos_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[4] = cos_out_expected_prev[4];
	end
	if (
		( cos_out_expected_prev[5] !== 1'bx ) && ( cos_out_prev[5] !== cos_out_expected_prev[5] )
		&& ((cos_out_expected_prev[5] !== last_cos_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[5] = cos_out_expected_prev[5];
	end
	if (
		( cos_out_expected_prev[6] !== 1'bx ) && ( cos_out_prev[6] !== cos_out_expected_prev[6] )
		&& ((cos_out_expected_prev[6] !== last_cos_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[6] = cos_out_expected_prev[6];
	end
	if (
		( cos_out_expected_prev[7] !== 1'bx ) && ( cos_out_prev[7] !== cos_out_expected_prev[7] )
		&& ((cos_out_expected_prev[7] !== last_cos_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[7] = cos_out_expected_prev[7];
	end
	if (
		( cos_out_expected_prev[8] !== 1'bx ) && ( cos_out_prev[8] !== cos_out_expected_prev[8] )
		&& ((cos_out_expected_prev[8] !== last_cos_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[8] = cos_out_expected_prev[8];
	end
	if (
		( cos_out_expected_prev[9] !== 1'bx ) && ( cos_out_prev[9] !== cos_out_expected_prev[9] )
		&& ((cos_out_expected_prev[9] !== last_cos_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[9] = cos_out_expected_prev[9];
	end
	if (
		( cos_out_expected_prev[10] !== 1'bx ) && ( cos_out_prev[10] !== cos_out_expected_prev[10] )
		&& ((cos_out_expected_prev[10] !== last_cos_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[10] = cos_out_expected_prev[10];
	end
	if (
		( cos_out_expected_prev[11] !== 1'bx ) && ( cos_out_prev[11] !== cos_out_expected_prev[11] )
		&& ((cos_out_expected_prev[11] !== last_cos_out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cos_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cos_out_expected_prev);
		$display ("     Real value = %b", cos_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cos_out_exp[11] = cos_out_expected_prev[11];
	end
	if (
		( saw_out_expected_prev[0] !== 1'bx ) && ( saw_out_prev[0] !== saw_out_expected_prev[0] )
		&& ((saw_out_expected_prev[0] !== last_saw_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[0] = saw_out_expected_prev[0];
	end
	if (
		( saw_out_expected_prev[1] !== 1'bx ) && ( saw_out_prev[1] !== saw_out_expected_prev[1] )
		&& ((saw_out_expected_prev[1] !== last_saw_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[1] = saw_out_expected_prev[1];
	end
	if (
		( saw_out_expected_prev[2] !== 1'bx ) && ( saw_out_prev[2] !== saw_out_expected_prev[2] )
		&& ((saw_out_expected_prev[2] !== last_saw_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[2] = saw_out_expected_prev[2];
	end
	if (
		( saw_out_expected_prev[3] !== 1'bx ) && ( saw_out_prev[3] !== saw_out_expected_prev[3] )
		&& ((saw_out_expected_prev[3] !== last_saw_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[3] = saw_out_expected_prev[3];
	end
	if (
		( saw_out_expected_prev[4] !== 1'bx ) && ( saw_out_prev[4] !== saw_out_expected_prev[4] )
		&& ((saw_out_expected_prev[4] !== last_saw_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[4] = saw_out_expected_prev[4];
	end
	if (
		( saw_out_expected_prev[5] !== 1'bx ) && ( saw_out_prev[5] !== saw_out_expected_prev[5] )
		&& ((saw_out_expected_prev[5] !== last_saw_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[5] = saw_out_expected_prev[5];
	end
	if (
		( saw_out_expected_prev[6] !== 1'bx ) && ( saw_out_prev[6] !== saw_out_expected_prev[6] )
		&& ((saw_out_expected_prev[6] !== last_saw_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[6] = saw_out_expected_prev[6];
	end
	if (
		( saw_out_expected_prev[7] !== 1'bx ) && ( saw_out_prev[7] !== saw_out_expected_prev[7] )
		&& ((saw_out_expected_prev[7] !== last_saw_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[7] = saw_out_expected_prev[7];
	end
	if (
		( saw_out_expected_prev[8] !== 1'bx ) && ( saw_out_prev[8] !== saw_out_expected_prev[8] )
		&& ((saw_out_expected_prev[8] !== last_saw_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[8] = saw_out_expected_prev[8];
	end
	if (
		( saw_out_expected_prev[9] !== 1'bx ) && ( saw_out_prev[9] !== saw_out_expected_prev[9] )
		&& ((saw_out_expected_prev[9] !== last_saw_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[9] = saw_out_expected_prev[9];
	end
	if (
		( saw_out_expected_prev[10] !== 1'bx ) && ( saw_out_prev[10] !== saw_out_expected_prev[10] )
		&& ((saw_out_expected_prev[10] !== last_saw_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[10] = saw_out_expected_prev[10];
	end
	if (
		( saw_out_expected_prev[11] !== 1'bx ) && ( saw_out_prev[11] !== saw_out_expected_prev[11] )
		&& ((saw_out_expected_prev[11] !== last_saw_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saw_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saw_out_expected_prev);
		$display ("     Real value = %b", saw_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saw_out_exp[11] = saw_out_expected_prev[11];
	end
	if (
		( sin_out_expected_prev[0] !== 1'bx ) && ( sin_out_prev[0] !== sin_out_expected_prev[0] )
		&& ((sin_out_expected_prev[0] !== last_sin_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[0] = sin_out_expected_prev[0];
	end
	if (
		( sin_out_expected_prev[1] !== 1'bx ) && ( sin_out_prev[1] !== sin_out_expected_prev[1] )
		&& ((sin_out_expected_prev[1] !== last_sin_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[1] = sin_out_expected_prev[1];
	end
	if (
		( sin_out_expected_prev[2] !== 1'bx ) && ( sin_out_prev[2] !== sin_out_expected_prev[2] )
		&& ((sin_out_expected_prev[2] !== last_sin_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[2] = sin_out_expected_prev[2];
	end
	if (
		( sin_out_expected_prev[3] !== 1'bx ) && ( sin_out_prev[3] !== sin_out_expected_prev[3] )
		&& ((sin_out_expected_prev[3] !== last_sin_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[3] = sin_out_expected_prev[3];
	end
	if (
		( sin_out_expected_prev[4] !== 1'bx ) && ( sin_out_prev[4] !== sin_out_expected_prev[4] )
		&& ((sin_out_expected_prev[4] !== last_sin_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[4] = sin_out_expected_prev[4];
	end
	if (
		( sin_out_expected_prev[5] !== 1'bx ) && ( sin_out_prev[5] !== sin_out_expected_prev[5] )
		&& ((sin_out_expected_prev[5] !== last_sin_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[5] = sin_out_expected_prev[5];
	end
	if (
		( sin_out_expected_prev[6] !== 1'bx ) && ( sin_out_prev[6] !== sin_out_expected_prev[6] )
		&& ((sin_out_expected_prev[6] !== last_sin_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[6] = sin_out_expected_prev[6];
	end
	if (
		( sin_out_expected_prev[7] !== 1'bx ) && ( sin_out_prev[7] !== sin_out_expected_prev[7] )
		&& ((sin_out_expected_prev[7] !== last_sin_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[7] = sin_out_expected_prev[7];
	end
	if (
		( sin_out_expected_prev[8] !== 1'bx ) && ( sin_out_prev[8] !== sin_out_expected_prev[8] )
		&& ((sin_out_expected_prev[8] !== last_sin_out_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[8] = sin_out_expected_prev[8];
	end
	if (
		( sin_out_expected_prev[9] !== 1'bx ) && ( sin_out_prev[9] !== sin_out_expected_prev[9] )
		&& ((sin_out_expected_prev[9] !== last_sin_out_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[9] = sin_out_expected_prev[9];
	end
	if (
		( sin_out_expected_prev[10] !== 1'bx ) && ( sin_out_prev[10] !== sin_out_expected_prev[10] )
		&& ((sin_out_expected_prev[10] !== last_sin_out_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[10] = sin_out_expected_prev[10];
	end
	if (
		( sin_out_expected_prev[11] !== 1'bx ) && ( sin_out_prev[11] !== sin_out_expected_prev[11] )
		&& ((sin_out_expected_prev[11] !== last_sin_out_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sin_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sin_out_expected_prev);
		$display ("     Real value = %b", sin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sin_out_exp[11] = sin_out_expected_prev[11];
	end
	if (
		( squ_out_expected_prev[0] !== 1'bx ) && ( squ_out_prev[0] !== squ_out_expected_prev[0] )
		&& ((squ_out_expected_prev[0] !== last_squ_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[0] = squ_out_expected_prev[0];
	end
	if (
		( squ_out_expected_prev[1] !== 1'bx ) && ( squ_out_prev[1] !== squ_out_expected_prev[1] )
		&& ((squ_out_expected_prev[1] !== last_squ_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[1] = squ_out_expected_prev[1];
	end
	if (
		( squ_out_expected_prev[2] !== 1'bx ) && ( squ_out_prev[2] !== squ_out_expected_prev[2] )
		&& ((squ_out_expected_prev[2] !== last_squ_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[2] = squ_out_expected_prev[2];
	end
	if (
		( squ_out_expected_prev[3] !== 1'bx ) && ( squ_out_prev[3] !== squ_out_expected_prev[3] )
		&& ((squ_out_expected_prev[3] !== last_squ_out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[3] = squ_out_expected_prev[3];
	end
	if (
		( squ_out_expected_prev[4] !== 1'bx ) && ( squ_out_prev[4] !== squ_out_expected_prev[4] )
		&& ((squ_out_expected_prev[4] !== last_squ_out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[4] = squ_out_expected_prev[4];
	end
	if (
		( squ_out_expected_prev[5] !== 1'bx ) && ( squ_out_prev[5] !== squ_out_expected_prev[5] )
		&& ((squ_out_expected_prev[5] !== last_squ_out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[5] = squ_out_expected_prev[5];
	end
	if (
		( squ_out_expected_prev[6] !== 1'bx ) && ( squ_out_prev[6] !== squ_out_expected_prev[6] )
		&& ((squ_out_expected_prev[6] !== last_squ_out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[6] = squ_out_expected_prev[6];
	end
	if (
		( squ_out_expected_prev[7] !== 1'bx ) && ( squ_out_prev[7] !== squ_out_expected_prev[7] )
		&& ((squ_out_expected_prev[7] !== last_squ_out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[7] = squ_out_expected_prev[7];
	end
	if (
		( squ_out_expected_prev[8] !== 1'bx ) && ( squ_out_prev[8] !== squ_out_expected_prev[8] )
		&& ((squ_out_expected_prev[8] !== last_squ_out_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[8] = squ_out_expected_prev[8];
	end
	if (
		( squ_out_expected_prev[9] !== 1'bx ) && ( squ_out_prev[9] !== squ_out_expected_prev[9] )
		&& ((squ_out_expected_prev[9] !== last_squ_out_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[9] = squ_out_expected_prev[9];
	end
	if (
		( squ_out_expected_prev[10] !== 1'bx ) && ( squ_out_prev[10] !== squ_out_expected_prev[10] )
		&& ((squ_out_expected_prev[10] !== last_squ_out_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[10] = squ_out_expected_prev[10];
	end
	if (
		( squ_out_expected_prev[11] !== 1'bx ) && ( squ_out_prev[11] !== squ_out_expected_prev[11] )
		&& ((squ_out_expected_prev[11] !== last_squ_out_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port squ_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", squ_out_expected_prev);
		$display ("     Real value = %b", squ_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_squ_out_exp[11] = squ_out_expected_prev[11];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module waveform_gen_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg en;
reg [31:0] phase_inc;
reg reset;
// wires                                               
wire [11:0] cos_out;
wire [11:0] saw_out;
wire [11:0] sin_out;
wire [11:0] squ_out;

wire sampler;                             

// assign statements (if any)                          
waveform_gen i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.cos_out(cos_out),
	.en(en),
	.phase_inc(phase_inc),
	.reset(reset),
	.saw_out(saw_out),
	.sin_out(sin_out),
	.squ_out(squ_out)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// en
initial
begin
	en = 1'b1;
end 
// phase_inc[ 31 ]
initial
begin
	phase_inc[31] = 1'b0;
end 
// phase_inc[ 30 ]
initial
begin
	phase_inc[30] = 1'b0;
end 
// phase_inc[ 29 ]
initial
begin
	phase_inc[29] = 1'b0;
end 
// phase_inc[ 28 ]
initial
begin
	phase_inc[28] = 1'b0;
end 
// phase_inc[ 27 ]
initial
begin
	phase_inc[27] = 1'b0;
end 
// phase_inc[ 26 ]
initial
begin
	phase_inc[26] = 1'b0;
end 
// phase_inc[ 25 ]
initial
begin
	phase_inc[25] = 1'b0;
end 
// phase_inc[ 24 ]
initial
begin
	phase_inc[24] = 1'b0;
end 
// phase_inc[ 23 ]
initial
begin
	phase_inc[23] = 1'b0;
end 
// phase_inc[ 22 ]
initial
begin
	phase_inc[22] = 1'b0;
end 
// phase_inc[ 21 ]
initial
begin
	phase_inc[21] = 1'b0;
end 
// phase_inc[ 20 ]
initial
begin
	phase_inc[20] = 1'b0;
end 
// phase_inc[ 19 ]
initial
begin
	phase_inc[19] = 1'b0;
end 
// phase_inc[ 18 ]
initial
begin
	phase_inc[18] = 1'b0;
end 
// phase_inc[ 17 ]
initial
begin
	phase_inc[17] = 1'b0;
end 
// phase_inc[ 16 ]
initial
begin
	phase_inc[16] = 1'b0;
end 
// phase_inc[ 15 ]
initial
begin
	phase_inc[15] = 1'b0;
end 
// phase_inc[ 14 ]
initial
begin
	phase_inc[14] = 1'b0;
end 
// phase_inc[ 13 ]
initial
begin
	phase_inc[13] = 1'b0;
end 
// phase_inc[ 12 ]
initial
begin
	phase_inc[12] = 1'b0;
end 
// phase_inc[ 11 ]
initial
begin
	phase_inc[11] = 1'b0;
end 
// phase_inc[ 10 ]
initial
begin
	phase_inc[10] = 1'b0;
end 
// phase_inc[ 9 ]
initial
begin
	phase_inc[9] = 1'b0;
end 
// phase_inc[ 8 ]
initial
begin
	phase_inc[8] = 1'b1;
end 
// phase_inc[ 7 ]
initial
begin
	phase_inc[7] = 1'b0;
end 
// phase_inc[ 6 ]
initial
begin
	phase_inc[6] = 1'b0;
end 
// phase_inc[ 5 ]
initial
begin
	phase_inc[5] = 1'b0;
end 
// phase_inc[ 4 ]
initial
begin
	phase_inc[4] = 1'b0;
end 
// phase_inc[ 3 ]
initial
begin
	phase_inc[3] = 1'b0;
end 
// phase_inc[ 2 ]
initial
begin
	phase_inc[2] = 1'b0;
end 
// phase_inc[ 1 ]
initial
begin
	phase_inc[1] = 1'b1;
end 
// phase_inc[ 0 ]
initial
begin
	phase_inc[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 

waveform_gen_vlg_sample_tst tb_sample (
	.clk(clk),
	.en(en),
	.phase_inc(phase_inc),
	.reset(reset),
	.sampler_tx(sampler)
);

waveform_gen_vlg_check_tst tb_out(
	.cos_out(cos_out),
	.saw_out(saw_out),
	.sin_out(sin_out),
	.squ_out(squ_out),
	.sampler_rx(sampler)
);
endmodule

