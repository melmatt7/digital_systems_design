// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/15/2020 19:46:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Flash_Address_Control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Flash_Address_Control_vlg_sample_tst(
	clk,
	end_addr,
	phonemeData,
	pico_recieved,
	readComplete,
	start,
	start_addr,
	sync_clk,
	sampler_tx
);
input  clk;
input [23:0] end_addr;
input [31:0] phonemeData;
input  pico_recieved;
input  readComplete;
input  start;
input [23:0] start_addr;
input  sync_clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk or end_addr or phonemeData or pico_recieved or readComplete or start or start_addr or sync_clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Flash_Address_Control_vlg_check_tst (
	addr,
	byteEnable,
	complete,
	outData,
	read,
	start_read_flash,
	volume,
	sampler_rx
);
input [22:0] addr;
input [23:0] byteEnable;
input  complete;
input [7:0] outData;
input  read;
input  start_read_flash;
input  volume;
input sampler_rx;

reg [22:0] addr_expected;
reg [23:0] byteEnable_expected;
reg  complete_expected;
reg [7:0] outData_expected;
reg  read_expected;
reg  start_read_flash_expected;
reg  volume_expected;

reg [22:0] addr_prev;
reg [23:0] byteEnable_prev;
reg  complete_prev;
reg [7:0] outData_prev;
reg  read_prev;
reg  start_read_flash_prev;
reg  volume_prev;

reg [22:0] addr_expected_prev;
reg [23:0] byteEnable_expected_prev;
reg  complete_expected_prev;
reg [7:0] outData_expected_prev;
reg  read_expected_prev;
reg  start_read_flash_expected_prev;
reg  volume_expected_prev;

reg [22:0] last_addr_exp;
reg [23:0] last_byteEnable_exp;
reg  last_complete_exp;
reg [7:0] last_outData_exp;
reg  last_read_exp;
reg  last_start_read_flash_exp;
reg  last_volume_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	addr_prev = addr;
	byteEnable_prev = byteEnable;
	complete_prev = complete;
	outData_prev = outData;
	read_prev = read;
	start_read_flash_prev = start_read_flash;
	volume_prev = volume;
end

// update expected /o prevs

always @(trigger)
begin
	addr_expected_prev = addr_expected;
	byteEnable_expected_prev = byteEnable_expected;
	complete_expected_prev = complete_expected;
	outData_expected_prev = outData_expected;
	read_expected_prev = read_expected;
	start_read_flash_expected_prev = start_read_flash_expected;
	volume_expected_prev = volume_expected;
end


// expected addr[ 22 ]
initial
begin
	addr_expected[22] = 1'bX;
end 
// expected addr[ 21 ]
initial
begin
	addr_expected[21] = 1'bX;
end 
// expected addr[ 20 ]
initial
begin
	addr_expected[20] = 1'bX;
end 
// expected addr[ 19 ]
initial
begin
	addr_expected[19] = 1'bX;
end 
// expected addr[ 18 ]
initial
begin
	addr_expected[18] = 1'bX;
end 
// expected addr[ 17 ]
initial
begin
	addr_expected[17] = 1'bX;
end 
// expected addr[ 16 ]
initial
begin
	addr_expected[16] = 1'bX;
end 
// expected addr[ 15 ]
initial
begin
	addr_expected[15] = 1'bX;
end 
// expected addr[ 14 ]
initial
begin
	addr_expected[14] = 1'bX;
end 
// expected addr[ 13 ]
initial
begin
	addr_expected[13] = 1'bX;
end 
// expected addr[ 12 ]
initial
begin
	addr_expected[12] = 1'bX;
end 
// expected addr[ 11 ]
initial
begin
	addr_expected[11] = 1'bX;
end 
// expected addr[ 10 ]
initial
begin
	addr_expected[10] = 1'bX;
end 
// expected addr[ 9 ]
initial
begin
	addr_expected[9] = 1'bX;
end 
// expected addr[ 8 ]
initial
begin
	addr_expected[8] = 1'bX;
end 
// expected addr[ 7 ]
initial
begin
	addr_expected[7] = 1'bX;
end 
// expected addr[ 6 ]
initial
begin
	addr_expected[6] = 1'bX;
end 
// expected addr[ 5 ]
initial
begin
	addr_expected[5] = 1'bX;
end 
// expected addr[ 4 ]
initial
begin
	addr_expected[4] = 1'bX;
end 
// expected addr[ 3 ]
initial
begin
	addr_expected[3] = 1'bX;
end 
// expected addr[ 2 ]
initial
begin
	addr_expected[2] = 1'bX;
end 
// expected addr[ 1 ]
initial
begin
	addr_expected[1] = 1'bX;
end 
// expected addr[ 0 ]
initial
begin
	addr_expected[0] = 1'bX;
end 
// expected byteEnable[ 23 ]
initial
begin
	byteEnable_expected[23] = 1'bX;
end 
// expected byteEnable[ 22 ]
initial
begin
	byteEnable_expected[22] = 1'bX;
end 
// expected byteEnable[ 21 ]
initial
begin
	byteEnable_expected[21] = 1'bX;
end 
// expected byteEnable[ 20 ]
initial
begin
	byteEnable_expected[20] = 1'bX;
end 
// expected byteEnable[ 19 ]
initial
begin
	byteEnable_expected[19] = 1'bX;
end 
// expected byteEnable[ 18 ]
initial
begin
	byteEnable_expected[18] = 1'bX;
end 
// expected byteEnable[ 17 ]
initial
begin
	byteEnable_expected[17] = 1'bX;
end 
// expected byteEnable[ 16 ]
initial
begin
	byteEnable_expected[16] = 1'bX;
end 
// expected byteEnable[ 15 ]
initial
begin
	byteEnable_expected[15] = 1'bX;
end 
// expected byteEnable[ 14 ]
initial
begin
	byteEnable_expected[14] = 1'bX;
end 
// expected byteEnable[ 13 ]
initial
begin
	byteEnable_expected[13] = 1'bX;
end 
// expected byteEnable[ 12 ]
initial
begin
	byteEnable_expected[12] = 1'bX;
end 
// expected byteEnable[ 11 ]
initial
begin
	byteEnable_expected[11] = 1'bX;
end 
// expected byteEnable[ 10 ]
initial
begin
	byteEnable_expected[10] = 1'bX;
end 
// expected byteEnable[ 9 ]
initial
begin
	byteEnable_expected[9] = 1'bX;
end 
// expected byteEnable[ 8 ]
initial
begin
	byteEnable_expected[8] = 1'bX;
end 
// expected byteEnable[ 7 ]
initial
begin
	byteEnable_expected[7] = 1'bX;
end 
// expected byteEnable[ 6 ]
initial
begin
	byteEnable_expected[6] = 1'bX;
end 
// expected byteEnable[ 5 ]
initial
begin
	byteEnable_expected[5] = 1'bX;
end 
// expected byteEnable[ 4 ]
initial
begin
	byteEnable_expected[4] = 1'bX;
end 
// expected byteEnable[ 3 ]
initial
begin
	byteEnable_expected[3] = 1'bX;
end 
// expected byteEnable[ 2 ]
initial
begin
	byteEnable_expected[2] = 1'bX;
end 
// expected byteEnable[ 1 ]
initial
begin
	byteEnable_expected[1] = 1'bX;
end 
// expected byteEnable[ 0 ]
initial
begin
	byteEnable_expected[0] = 1'bX;
end 

// expected complete
initial
begin
	complete_expected = 1'bX;
end 
// expected outData[ 7 ]
initial
begin
	outData_expected[7] = 1'bX;
end 
// expected outData[ 6 ]
initial
begin
	outData_expected[6] = 1'bX;
end 
// expected outData[ 5 ]
initial
begin
	outData_expected[5] = 1'bX;
end 
// expected outData[ 4 ]
initial
begin
	outData_expected[4] = 1'bX;
end 
// expected outData[ 3 ]
initial
begin
	outData_expected[3] = 1'bX;
end 
// expected outData[ 2 ]
initial
begin
	outData_expected[2] = 1'bX;
end 
// expected outData[ 1 ]
initial
begin
	outData_expected[1] = 1'bX;
end 
// expected outData[ 0 ]
initial
begin
	outData_expected[0] = 1'bX;
end 

// expected read
initial
begin
	read_expected = 1'bX;
end 

// expected start_read_flash
initial
begin
	start_read_flash_expected = 1'bX;
end 

// expected volume
initial
begin
	volume_expected = 1'bX;
end 
// generate trigger
always @(addr_expected or addr or byteEnable_expected or byteEnable or complete_expected or complete or outData_expected or outData or read_expected or read or start_read_flash_expected or start_read_flash or volume_expected or volume)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addr = %b | expected byteEnable = %b | expected complete = %b | expected outData = %b | expected read = %b | expected start_read_flash = %b | expected volume = %b | ",addr_expected_prev,byteEnable_expected_prev,complete_expected_prev,outData_expected_prev,read_expected_prev,start_read_flash_expected_prev,volume_expected_prev);
	$display("| real addr = %b | real byteEnable = %b | real complete = %b | real outData = %b | real read = %b | real start_read_flash = %b | real volume = %b | ",addr_prev,byteEnable_prev,complete_prev,outData_prev,read_prev,start_read_flash_prev,volume_prev);
`endif
	if (
		( addr_expected_prev[0] !== 1'bx ) && ( addr_prev[0] !== addr_expected_prev[0] )
		&& ((addr_expected_prev[0] !== last_addr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[0] = addr_expected_prev[0];
	end
	if (
		( addr_expected_prev[1] !== 1'bx ) && ( addr_prev[1] !== addr_expected_prev[1] )
		&& ((addr_expected_prev[1] !== last_addr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[1] = addr_expected_prev[1];
	end
	if (
		( addr_expected_prev[2] !== 1'bx ) && ( addr_prev[2] !== addr_expected_prev[2] )
		&& ((addr_expected_prev[2] !== last_addr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[2] = addr_expected_prev[2];
	end
	if (
		( addr_expected_prev[3] !== 1'bx ) && ( addr_prev[3] !== addr_expected_prev[3] )
		&& ((addr_expected_prev[3] !== last_addr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[3] = addr_expected_prev[3];
	end
	if (
		( addr_expected_prev[4] !== 1'bx ) && ( addr_prev[4] !== addr_expected_prev[4] )
		&& ((addr_expected_prev[4] !== last_addr_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[4] = addr_expected_prev[4];
	end
	if (
		( addr_expected_prev[5] !== 1'bx ) && ( addr_prev[5] !== addr_expected_prev[5] )
		&& ((addr_expected_prev[5] !== last_addr_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[5] = addr_expected_prev[5];
	end
	if (
		( addr_expected_prev[6] !== 1'bx ) && ( addr_prev[6] !== addr_expected_prev[6] )
		&& ((addr_expected_prev[6] !== last_addr_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[6] = addr_expected_prev[6];
	end
	if (
		( addr_expected_prev[7] !== 1'bx ) && ( addr_prev[7] !== addr_expected_prev[7] )
		&& ((addr_expected_prev[7] !== last_addr_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[7] = addr_expected_prev[7];
	end
	if (
		( addr_expected_prev[8] !== 1'bx ) && ( addr_prev[8] !== addr_expected_prev[8] )
		&& ((addr_expected_prev[8] !== last_addr_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[8] = addr_expected_prev[8];
	end
	if (
		( addr_expected_prev[9] !== 1'bx ) && ( addr_prev[9] !== addr_expected_prev[9] )
		&& ((addr_expected_prev[9] !== last_addr_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[9] = addr_expected_prev[9];
	end
	if (
		( addr_expected_prev[10] !== 1'bx ) && ( addr_prev[10] !== addr_expected_prev[10] )
		&& ((addr_expected_prev[10] !== last_addr_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[10] = addr_expected_prev[10];
	end
	if (
		( addr_expected_prev[11] !== 1'bx ) && ( addr_prev[11] !== addr_expected_prev[11] )
		&& ((addr_expected_prev[11] !== last_addr_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[11] = addr_expected_prev[11];
	end
	if (
		( addr_expected_prev[12] !== 1'bx ) && ( addr_prev[12] !== addr_expected_prev[12] )
		&& ((addr_expected_prev[12] !== last_addr_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[12] = addr_expected_prev[12];
	end
	if (
		( addr_expected_prev[13] !== 1'bx ) && ( addr_prev[13] !== addr_expected_prev[13] )
		&& ((addr_expected_prev[13] !== last_addr_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[13] = addr_expected_prev[13];
	end
	if (
		( addr_expected_prev[14] !== 1'bx ) && ( addr_prev[14] !== addr_expected_prev[14] )
		&& ((addr_expected_prev[14] !== last_addr_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[14] = addr_expected_prev[14];
	end
	if (
		( addr_expected_prev[15] !== 1'bx ) && ( addr_prev[15] !== addr_expected_prev[15] )
		&& ((addr_expected_prev[15] !== last_addr_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[15] = addr_expected_prev[15];
	end
	if (
		( addr_expected_prev[16] !== 1'bx ) && ( addr_prev[16] !== addr_expected_prev[16] )
		&& ((addr_expected_prev[16] !== last_addr_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[16] = addr_expected_prev[16];
	end
	if (
		( addr_expected_prev[17] !== 1'bx ) && ( addr_prev[17] !== addr_expected_prev[17] )
		&& ((addr_expected_prev[17] !== last_addr_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[17] = addr_expected_prev[17];
	end
	if (
		( addr_expected_prev[18] !== 1'bx ) && ( addr_prev[18] !== addr_expected_prev[18] )
		&& ((addr_expected_prev[18] !== last_addr_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[18] = addr_expected_prev[18];
	end
	if (
		( addr_expected_prev[19] !== 1'bx ) && ( addr_prev[19] !== addr_expected_prev[19] )
		&& ((addr_expected_prev[19] !== last_addr_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[19] = addr_expected_prev[19];
	end
	if (
		( addr_expected_prev[20] !== 1'bx ) && ( addr_prev[20] !== addr_expected_prev[20] )
		&& ((addr_expected_prev[20] !== last_addr_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[20] = addr_expected_prev[20];
	end
	if (
		( addr_expected_prev[21] !== 1'bx ) && ( addr_prev[21] !== addr_expected_prev[21] )
		&& ((addr_expected_prev[21] !== last_addr_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[21] = addr_expected_prev[21];
	end
	if (
		( addr_expected_prev[22] !== 1'bx ) && ( addr_prev[22] !== addr_expected_prev[22] )
		&& ((addr_expected_prev[22] !== last_addr_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[22] = addr_expected_prev[22];
	end
	if (
		( byteEnable_expected_prev[0] !== 1'bx ) && ( byteEnable_prev[0] !== byteEnable_expected_prev[0] )
		&& ((byteEnable_expected_prev[0] !== last_byteEnable_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[0] = byteEnable_expected_prev[0];
	end
	if (
		( byteEnable_expected_prev[1] !== 1'bx ) && ( byteEnable_prev[1] !== byteEnable_expected_prev[1] )
		&& ((byteEnable_expected_prev[1] !== last_byteEnable_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[1] = byteEnable_expected_prev[1];
	end
	if (
		( byteEnable_expected_prev[2] !== 1'bx ) && ( byteEnable_prev[2] !== byteEnable_expected_prev[2] )
		&& ((byteEnable_expected_prev[2] !== last_byteEnable_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[2] = byteEnable_expected_prev[2];
	end
	if (
		( byteEnable_expected_prev[3] !== 1'bx ) && ( byteEnable_prev[3] !== byteEnable_expected_prev[3] )
		&& ((byteEnable_expected_prev[3] !== last_byteEnable_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[3] = byteEnable_expected_prev[3];
	end
	if (
		( byteEnable_expected_prev[4] !== 1'bx ) && ( byteEnable_prev[4] !== byteEnable_expected_prev[4] )
		&& ((byteEnable_expected_prev[4] !== last_byteEnable_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[4] = byteEnable_expected_prev[4];
	end
	if (
		( byteEnable_expected_prev[5] !== 1'bx ) && ( byteEnable_prev[5] !== byteEnable_expected_prev[5] )
		&& ((byteEnable_expected_prev[5] !== last_byteEnable_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[5] = byteEnable_expected_prev[5];
	end
	if (
		( byteEnable_expected_prev[6] !== 1'bx ) && ( byteEnable_prev[6] !== byteEnable_expected_prev[6] )
		&& ((byteEnable_expected_prev[6] !== last_byteEnable_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[6] = byteEnable_expected_prev[6];
	end
	if (
		( byteEnable_expected_prev[7] !== 1'bx ) && ( byteEnable_prev[7] !== byteEnable_expected_prev[7] )
		&& ((byteEnable_expected_prev[7] !== last_byteEnable_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[7] = byteEnable_expected_prev[7];
	end
	if (
		( byteEnable_expected_prev[8] !== 1'bx ) && ( byteEnable_prev[8] !== byteEnable_expected_prev[8] )
		&& ((byteEnable_expected_prev[8] !== last_byteEnable_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[8] = byteEnable_expected_prev[8];
	end
	if (
		( byteEnable_expected_prev[9] !== 1'bx ) && ( byteEnable_prev[9] !== byteEnable_expected_prev[9] )
		&& ((byteEnable_expected_prev[9] !== last_byteEnable_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[9] = byteEnable_expected_prev[9];
	end
	if (
		( byteEnable_expected_prev[10] !== 1'bx ) && ( byteEnable_prev[10] !== byteEnable_expected_prev[10] )
		&& ((byteEnable_expected_prev[10] !== last_byteEnable_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[10] = byteEnable_expected_prev[10];
	end
	if (
		( byteEnable_expected_prev[11] !== 1'bx ) && ( byteEnable_prev[11] !== byteEnable_expected_prev[11] )
		&& ((byteEnable_expected_prev[11] !== last_byteEnable_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[11] = byteEnable_expected_prev[11];
	end
	if (
		( byteEnable_expected_prev[12] !== 1'bx ) && ( byteEnable_prev[12] !== byteEnable_expected_prev[12] )
		&& ((byteEnable_expected_prev[12] !== last_byteEnable_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[12] = byteEnable_expected_prev[12];
	end
	if (
		( byteEnable_expected_prev[13] !== 1'bx ) && ( byteEnable_prev[13] !== byteEnable_expected_prev[13] )
		&& ((byteEnable_expected_prev[13] !== last_byteEnable_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[13] = byteEnable_expected_prev[13];
	end
	if (
		( byteEnable_expected_prev[14] !== 1'bx ) && ( byteEnable_prev[14] !== byteEnable_expected_prev[14] )
		&& ((byteEnable_expected_prev[14] !== last_byteEnable_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[14] = byteEnable_expected_prev[14];
	end
	if (
		( byteEnable_expected_prev[15] !== 1'bx ) && ( byteEnable_prev[15] !== byteEnable_expected_prev[15] )
		&& ((byteEnable_expected_prev[15] !== last_byteEnable_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[15] = byteEnable_expected_prev[15];
	end
	if (
		( byteEnable_expected_prev[16] !== 1'bx ) && ( byteEnable_prev[16] !== byteEnable_expected_prev[16] )
		&& ((byteEnable_expected_prev[16] !== last_byteEnable_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[16] = byteEnable_expected_prev[16];
	end
	if (
		( byteEnable_expected_prev[17] !== 1'bx ) && ( byteEnable_prev[17] !== byteEnable_expected_prev[17] )
		&& ((byteEnable_expected_prev[17] !== last_byteEnable_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[17] = byteEnable_expected_prev[17];
	end
	if (
		( byteEnable_expected_prev[18] !== 1'bx ) && ( byteEnable_prev[18] !== byteEnable_expected_prev[18] )
		&& ((byteEnable_expected_prev[18] !== last_byteEnable_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[18] = byteEnable_expected_prev[18];
	end
	if (
		( byteEnable_expected_prev[19] !== 1'bx ) && ( byteEnable_prev[19] !== byteEnable_expected_prev[19] )
		&& ((byteEnable_expected_prev[19] !== last_byteEnable_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[19] = byteEnable_expected_prev[19];
	end
	if (
		( byteEnable_expected_prev[20] !== 1'bx ) && ( byteEnable_prev[20] !== byteEnable_expected_prev[20] )
		&& ((byteEnable_expected_prev[20] !== last_byteEnable_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[20] = byteEnable_expected_prev[20];
	end
	if (
		( byteEnable_expected_prev[21] !== 1'bx ) && ( byteEnable_prev[21] !== byteEnable_expected_prev[21] )
		&& ((byteEnable_expected_prev[21] !== last_byteEnable_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[21] = byteEnable_expected_prev[21];
	end
	if (
		( byteEnable_expected_prev[22] !== 1'bx ) && ( byteEnable_prev[22] !== byteEnable_expected_prev[22] )
		&& ((byteEnable_expected_prev[22] !== last_byteEnable_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[22] = byteEnable_expected_prev[22];
	end
	if (
		( byteEnable_expected_prev[23] !== 1'bx ) && ( byteEnable_prev[23] !== byteEnable_expected_prev[23] )
		&& ((byteEnable_expected_prev[23] !== last_byteEnable_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteEnable[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteEnable_expected_prev);
		$display ("     Real value = %b", byteEnable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_byteEnable_exp[23] = byteEnable_expected_prev[23];
	end
	if (
		( complete_expected_prev !== 1'bx ) && ( complete_prev !== complete_expected_prev )
		&& ((complete_expected_prev !== last_complete_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port complete :: @time = %t",  $realtime);
		$display ("     Expected value = %b", complete_expected_prev);
		$display ("     Real value = %b", complete_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_complete_exp = complete_expected_prev;
	end
	if (
		( outData_expected_prev[0] !== 1'bx ) && ( outData_prev[0] !== outData_expected_prev[0] )
		&& ((outData_expected_prev[0] !== last_outData_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outData_expected_prev);
		$display ("     Real value = %b", outData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outData_exp[0] = outData_expected_prev[0];
	end
	if (
		( outData_expected_prev[1] !== 1'bx ) && ( outData_prev[1] !== outData_expected_prev[1] )
		&& ((outData_expected_prev[1] !== last_outData_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outData_expected_prev);
		$display ("     Real value = %b", outData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outData_exp[1] = outData_expected_prev[1];
	end
	if (
		( outData_expected_prev[2] !== 1'bx ) && ( outData_prev[2] !== outData_expected_prev[2] )
		&& ((outData_expected_prev[2] !== last_outData_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outData_expected_prev);
		$display ("     Real value = %b", outData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outData_exp[2] = outData_expected_prev[2];
	end
	if (
		( outData_expected_prev[3] !== 1'bx ) && ( outData_prev[3] !== outData_expected_prev[3] )
		&& ((outData_expected_prev[3] !== last_outData_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outData_expected_prev);
		$display ("     Real value = %b", outData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outData_exp[3] = outData_expected_prev[3];
	end
	if (
		( outData_expected_prev[4] !== 1'bx ) && ( outData_prev[4] !== outData_expected_prev[4] )
		&& ((outData_expected_prev[4] !== last_outData_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outData_expected_prev);
		$display ("     Real value = %b", outData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outData_exp[4] = outData_expected_prev[4];
	end
	if (
		( outData_expected_prev[5] !== 1'bx ) && ( outData_prev[5] !== outData_expected_prev[5] )
		&& ((outData_expected_prev[5] !== last_outData_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outData_expected_prev);
		$display ("     Real value = %b", outData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outData_exp[5] = outData_expected_prev[5];
	end
	if (
		( outData_expected_prev[6] !== 1'bx ) && ( outData_prev[6] !== outData_expected_prev[6] )
		&& ((outData_expected_prev[6] !== last_outData_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outData_expected_prev);
		$display ("     Real value = %b", outData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outData_exp[6] = outData_expected_prev[6];
	end
	if (
		( outData_expected_prev[7] !== 1'bx ) && ( outData_prev[7] !== outData_expected_prev[7] )
		&& ((outData_expected_prev[7] !== last_outData_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outData_expected_prev);
		$display ("     Real value = %b", outData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outData_exp[7] = outData_expected_prev[7];
	end
	if (
		( read_expected_prev !== 1'bx ) && ( read_prev !== read_expected_prev )
		&& ((read_expected_prev !== last_read_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_expected_prev);
		$display ("     Real value = %b", read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read_exp = read_expected_prev;
	end
	if (
		( start_read_flash_expected_prev !== 1'bx ) && ( start_read_flash_prev !== start_read_flash_expected_prev )
		&& ((start_read_flash_expected_prev !== last_start_read_flash_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port start_read_flash :: @time = %t",  $realtime);
		$display ("     Expected value = %b", start_read_flash_expected_prev);
		$display ("     Real value = %b", start_read_flash_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_start_read_flash_exp = start_read_flash_expected_prev;
	end
	if (
		( volume_expected_prev !== 1'bx ) && ( volume_prev !== volume_expected_prev )
		&& ((volume_expected_prev !== last_volume_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volume :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volume_expected_prev);
		$display ("     Real value = %b", volume_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_volume_exp = volume_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Flash_Address_Control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [23:0] end_addr;
reg [31:0] phonemeData;
reg pico_recieved;
reg readComplete;
reg start;
reg [23:0] start_addr;
reg sync_clk;
// wires                                               
wire [22:0] addr;
wire [23:0] byteEnable;
wire complete;
wire [7:0] outData;
wire read;
wire start_read_flash;
wire volume;

wire sampler;                             

// assign statements (if any)                          
Flash_Address_Control i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.byteEnable(byteEnable),
	.clk(clk),
	.complete(complete),
	.end_addr(end_addr),
	.outData(outData),
	.phonemeData(phonemeData),
	.pico_recieved(pico_recieved),
	.read(read),
	.readComplete(readComplete),
	.start(start),
	.start_addr(start_addr),
	.start_read_flash(start_read_flash),
	.sync_clk(sync_clk),
	.volume(volume)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// sync_clk
initial
begin
	repeat(9)
	begin
		sync_clk = 1'b0;
		sync_clk = #55000 1'b1;
		# 55000;
	end
	sync_clk = 1'b0;
end 

// start
initial
begin
	start = 1'b1;
end 
// start_addr[ 23 ]
initial
begin
	start_addr[23] = 1'b0;
end 
// start_addr[ 22 ]
initial
begin
	start_addr[22] = 1'b0;
end 
// start_addr[ 21 ]
initial
begin
	start_addr[21] = 1'b0;
end 
// start_addr[ 20 ]
initial
begin
	start_addr[20] = 1'b0;
end 
// start_addr[ 19 ]
initial
begin
	start_addr[19] = 1'b0;
end 
// start_addr[ 18 ]
initial
begin
	start_addr[18] = 1'b0;
end 
// start_addr[ 17 ]
initial
begin
	start_addr[17] = 1'b0;
end 
// start_addr[ 16 ]
initial
begin
	start_addr[16] = 1'b0;
end 
// start_addr[ 15 ]
initial
begin
	start_addr[15] = 1'b0;
end 
// start_addr[ 14 ]
initial
begin
	start_addr[14] = 1'b0;
end 
// start_addr[ 13 ]
initial
begin
	start_addr[13] = 1'b0;
end 
// start_addr[ 12 ]
initial
begin
	start_addr[12] = 1'b0;
end 
// start_addr[ 11 ]
initial
begin
	start_addr[11] = 1'b0;
end 
// start_addr[ 10 ]
initial
begin
	start_addr[10] = 1'b0;
end 
// start_addr[ 9 ]
initial
begin
	start_addr[9] = 1'b0;
end 
// start_addr[ 8 ]
initial
begin
	start_addr[8] = 1'b0;
end 
// start_addr[ 7 ]
initial
begin
	start_addr[7] = 1'b0;
end 
// start_addr[ 6 ]
initial
begin
	start_addr[6] = 1'b0;
end 
// start_addr[ 5 ]
initial
begin
	start_addr[5] = 1'b0;
end 
// start_addr[ 4 ]
initial
begin
	start_addr[4] = 1'b0;
end 
// start_addr[ 3 ]
initial
begin
	start_addr[3] = 1'b0;
end 
// start_addr[ 2 ]
initial
begin
	start_addr[2] = 1'b0;
end 
// start_addr[ 1 ]
initial
begin
	start_addr[1] = 1'b0;
end 
// start_addr[ 0 ]
initial
begin
	start_addr[0] = 1'b0;
end 
// end_addr[ 23 ]
initial
begin
	end_addr[23] = 1'b0;
end 
// end_addr[ 22 ]
initial
begin
	end_addr[22] = 1'b0;
end 
// end_addr[ 21 ]
initial
begin
	end_addr[21] = 1'b0;
end 
// end_addr[ 20 ]
initial
begin
	end_addr[20] = 1'b0;
end 
// end_addr[ 19 ]
initial
begin
	end_addr[19] = 1'b0;
end 
// end_addr[ 18 ]
initial
begin
	end_addr[18] = 1'b0;
end 
// end_addr[ 17 ]
initial
begin
	end_addr[17] = 1'b0;
end 
// end_addr[ 16 ]
initial
begin
	end_addr[16] = 1'b0;
end 
// end_addr[ 15 ]
initial
begin
	end_addr[15] = 1'b0;
end 
// end_addr[ 14 ]
initial
begin
	end_addr[14] = 1'b0;
end 
// end_addr[ 13 ]
initial
begin
	end_addr[13] = 1'b0;
end 
// end_addr[ 12 ]
initial
begin
	end_addr[12] = 1'b0;
end 
// end_addr[ 11 ]
initial
begin
	end_addr[11] = 1'b0;
end 
// end_addr[ 10 ]
initial
begin
	end_addr[10] = 1'b0;
end 
// end_addr[ 9 ]
initial
begin
	end_addr[9] = 1'b0;
end 
// end_addr[ 8 ]
initial
begin
	end_addr[8] = 1'b0;
end 
// end_addr[ 7 ]
initial
begin
	end_addr[7] = 1'b0;
end 
// end_addr[ 6 ]
initial
begin
	end_addr[6] = 1'b0;
end 
// end_addr[ 5 ]
initial
begin
	end_addr[5] = 1'b0;
end 
// end_addr[ 4 ]
initial
begin
	end_addr[4] = 1'b0;
end 
// end_addr[ 3 ]
initial
begin
	end_addr[3] = 1'b1;
end 
// end_addr[ 2 ]
initial
begin
	end_addr[2] = 1'b1;
end 
// end_addr[ 1 ]
initial
begin
	end_addr[1] = 1'b0;
end 
// end_addr[ 0 ]
initial
begin
	end_addr[0] = 1'b1;
end 
// phonemeData[ 31 ]
initial
begin
	phonemeData[31] = 1'b0;
end 
// phonemeData[ 30 ]
initial
begin
	phonemeData[30] = 1'b1;
end 
// phonemeData[ 29 ]
initial
begin
	phonemeData[29] = 1'b0;
end 
// phonemeData[ 28 ]
initial
begin
	phonemeData[28] = 1'b0;
end 
// phonemeData[ 27 ]
initial
begin
	phonemeData[27] = 1'b0;
end 
// phonemeData[ 26 ]
initial
begin
	phonemeData[26] = 1'b0;
end 
// phonemeData[ 25 ]
initial
begin
	phonemeData[25] = 1'b0;
end 
// phonemeData[ 24 ]
initial
begin
	phonemeData[24] = 1'b1;
end 
// phonemeData[ 23 ]
initial
begin
	phonemeData[23] = 1'b0;
end 
// phonemeData[ 22 ]
initial
begin
	phonemeData[22] = 1'b1;
end 
// phonemeData[ 21 ]
initial
begin
	phonemeData[21] = 1'b0;
end 
// phonemeData[ 20 ]
initial
begin
	phonemeData[20] = 1'b0;
end 
// phonemeData[ 19 ]
initial
begin
	phonemeData[19] = 1'b0;
end 
// phonemeData[ 18 ]
initial
begin
	phonemeData[18] = 1'b0;
end 
// phonemeData[ 17 ]
initial
begin
	phonemeData[17] = 1'b1;
end 
// phonemeData[ 16 ]
initial
begin
	phonemeData[16] = 1'b0;
end 
// phonemeData[ 15 ]
initial
begin
	phonemeData[15] = 1'b0;
end 
// phonemeData[ 14 ]
initial
begin
	phonemeData[14] = 1'b1;
end 
// phonemeData[ 13 ]
initial
begin
	phonemeData[13] = 1'b0;
end 
// phonemeData[ 12 ]
initial
begin
	phonemeData[12] = 1'b0;
end 
// phonemeData[ 11 ]
initial
begin
	phonemeData[11] = 1'b0;
end 
// phonemeData[ 10 ]
initial
begin
	phonemeData[10] = 1'b0;
end 
// phonemeData[ 9 ]
initial
begin
	phonemeData[9] = 1'b1;
end 
// phonemeData[ 8 ]
initial
begin
	phonemeData[8] = 1'b1;
end 
// phonemeData[ 7 ]
initial
begin
	phonemeData[7] = 1'b0;
end 
// phonemeData[ 6 ]
initial
begin
	phonemeData[6] = 1'b1;
end 
// phonemeData[ 5 ]
initial
begin
	phonemeData[5] = 1'b0;
end 
// phonemeData[ 4 ]
initial
begin
	phonemeData[4] = 1'b0;
end 
// phonemeData[ 3 ]
initial
begin
	phonemeData[3] = 1'b0;
end 
// phonemeData[ 2 ]
initial
begin
	phonemeData[2] = 1'b1;
end 
// phonemeData[ 1 ]
initial
begin
	phonemeData[1] = 1'b0;
end 
// phonemeData[ 0 ]
initial
begin
	phonemeData[0] = 1'b0;
end 

// pico_recieved
initial
begin
	pico_recieved = 1'b0;
	pico_recieved = #810000 1'b1;
	pico_recieved = #40000 1'b0;
end 

// readComplete
initial
begin
	readComplete = 1'b0;
	readComplete = #240000 1'b1;
	readComplete = #50000 1'b0;
end 

Flash_Address_Control_vlg_sample_tst tb_sample (
	.clk(clk),
	.end_addr(end_addr),
	.phonemeData(phonemeData),
	.pico_recieved(pico_recieved),
	.readComplete(readComplete),
	.start(start),
	.start_addr(start_addr),
	.sync_clk(sync_clk),
	.sampler_tx(sampler)
);

Flash_Address_Control_vlg_check_tst tb_out(
	.addr(addr),
	.byteEnable(byteEnable),
	.complete(complete),
	.outData(outData),
	.read(read),
	.start_read_flash(start_read_flash),
	.volume(volume),
	.sampler_rx(sampler)
);
endmodule

