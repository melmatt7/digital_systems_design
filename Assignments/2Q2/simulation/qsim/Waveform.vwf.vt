// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/09/2020 19:31:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fsm_vlg_sample_tst(
	clk,
	goto_third,
	pause,
	restart,
	rst,
	sampler_tx
);
input  clk;
input  goto_third;
input  pause;
input  restart;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or goto_third or pause or restart or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fsm_vlg_check_tst (
	Out1,
	Out2,
	even,
	odd,
	state,
	terminal,
	sampler_rx
);
input [2:0] Out1;
input [2:0] Out2;
input  even;
input  odd;
input [8:0] state;
input  terminal;
input sampler_rx;

reg [2:0] Out1_expected;
reg [2:0] Out2_expected;
reg  even_expected;
reg  odd_expected;
reg [8:0] state_expected;
reg  terminal_expected;

reg [2:0] Out1_prev;
reg [2:0] Out2_prev;
reg  even_prev;
reg  odd_prev;
reg [8:0] state_prev;
reg  terminal_prev;

reg [2:0] Out1_expected_prev;
reg [2:0] Out2_expected_prev;
reg  even_expected_prev;
reg  odd_expected_prev;
reg [8:0] state_expected_prev;
reg  terminal_expected_prev;

reg [2:0] last_Out1_exp;
reg [2:0] last_Out2_exp;
reg  last_even_exp;
reg  last_odd_exp;
reg [8:0] last_state_exp;
reg  last_terminal_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Out1_prev = Out1;
	Out2_prev = Out2;
	even_prev = even;
	odd_prev = odd;
	state_prev = state;
	terminal_prev = terminal;
end

// update expected /o prevs

always @(trigger)
begin
	Out1_expected_prev = Out1_expected;
	Out2_expected_prev = Out2_expected;
	even_expected_prev = even_expected;
	odd_expected_prev = odd_expected;
	state_expected_prev = state_expected;
	terminal_expected_prev = terminal_expected;
end



// expected terminal
initial
begin
	terminal_expected = 1'bX;
end 
// expected Out2[ 2 ]
initial
begin
	Out2_expected[2] = 1'bX;
end 
// expected Out2[ 1 ]
initial
begin
	Out2_expected[1] = 1'bX;
end 
// expected Out2[ 0 ]
initial
begin
	Out2_expected[0] = 1'bX;
end 
// expected Out1[ 2 ]
initial
begin
	Out1_expected[2] = 1'bX;
end 
// expected Out1[ 1 ]
initial
begin
	Out1_expected[1] = 1'bX;
end 
// expected Out1[ 0 ]
initial
begin
	Out1_expected[0] = 1'bX;
end 

// expected even
initial
begin
	even_expected = 1'bX;
end 

// expected odd
initial
begin
	odd_expected = 1'bX;
end 
// expected state[ 8 ]
initial
begin
	state_expected[8] = 1'bX;
end 
// expected state[ 7 ]
initial
begin
	state_expected[7] = 1'bX;
end 
// expected state[ 6 ]
initial
begin
	state_expected[6] = 1'bX;
end 
// expected state[ 5 ]
initial
begin
	state_expected[5] = 1'bX;
end 
// expected state[ 4 ]
initial
begin
	state_expected[4] = 1'bX;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(Out1_expected or Out1 or Out2_expected or Out2 or even_expected or even or odd_expected or odd or state_expected or state or terminal_expected or terminal)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Out1 = %b | expected Out2 = %b | expected even = %b | expected odd = %b | expected state = %b | expected terminal = %b | ",Out1_expected_prev,Out2_expected_prev,even_expected_prev,odd_expected_prev,state_expected_prev,terminal_expected_prev);
	$display("| real Out1 = %b | real Out2 = %b | real even = %b | real odd = %b | real state = %b | real terminal = %b | ",Out1_prev,Out2_prev,even_prev,odd_prev,state_prev,terminal_prev);
`endif
	if (
		( Out1_expected_prev[0] !== 1'bx ) && ( Out1_prev[0] !== Out1_expected_prev[0] )
		&& ((Out1_expected_prev[0] !== last_Out1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out1_expected_prev);
		$display ("     Real value = %b", Out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out1_exp[0] = Out1_expected_prev[0];
	end
	if (
		( Out1_expected_prev[1] !== 1'bx ) && ( Out1_prev[1] !== Out1_expected_prev[1] )
		&& ((Out1_expected_prev[1] !== last_Out1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out1_expected_prev);
		$display ("     Real value = %b", Out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out1_exp[1] = Out1_expected_prev[1];
	end
	if (
		( Out1_expected_prev[2] !== 1'bx ) && ( Out1_prev[2] !== Out1_expected_prev[2] )
		&& ((Out1_expected_prev[2] !== last_Out1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out1_expected_prev);
		$display ("     Real value = %b", Out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out1_exp[2] = Out1_expected_prev[2];
	end
	if (
		( Out2_expected_prev[0] !== 1'bx ) && ( Out2_prev[0] !== Out2_expected_prev[0] )
		&& ((Out2_expected_prev[0] !== last_Out2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out2_expected_prev);
		$display ("     Real value = %b", Out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Out2_exp[0] = Out2_expected_prev[0];
	end
	if (
		( Out2_expected_prev[1] !== 1'bx ) && ( Out2_prev[1] !== Out2_expected_prev[1] )
		&& ((Out2_expected_prev[1] !== last_Out2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out2_expected_prev);
		$display ("     Real value = %b", Out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Out2_exp[1] = Out2_expected_prev[1];
	end
	if (
		( Out2_expected_prev[2] !== 1'bx ) && ( Out2_prev[2] !== Out2_expected_prev[2] )
		&& ((Out2_expected_prev[2] !== last_Out2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out2_expected_prev);
		$display ("     Real value = %b", Out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Out2_exp[2] = Out2_expected_prev[2];
	end
	if (
		( even_expected_prev !== 1'bx ) && ( even_prev !== even_expected_prev )
		&& ((even_expected_prev !== last_even_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_expected_prev);
		$display ("     Real value = %b", even_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_even_exp = even_expected_prev;
	end
	if (
		( odd_expected_prev !== 1'bx ) && ( odd_prev !== odd_expected_prev )
		&& ((odd_expected_prev !== last_odd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port odd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", odd_expected_prev);
		$display ("     Real value = %b", odd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_odd_exp = odd_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( state_expected_prev[4] !== 1'bx ) && ( state_prev[4] !== state_expected_prev[4] )
		&& ((state_expected_prev[4] !== last_state_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[4] = state_expected_prev[4];
	end
	if (
		( state_expected_prev[5] !== 1'bx ) && ( state_prev[5] !== state_expected_prev[5] )
		&& ((state_expected_prev[5] !== last_state_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[5] = state_expected_prev[5];
	end
	if (
		( state_expected_prev[6] !== 1'bx ) && ( state_prev[6] !== state_expected_prev[6] )
		&& ((state_expected_prev[6] !== last_state_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[6] = state_expected_prev[6];
	end
	if (
		( state_expected_prev[7] !== 1'bx ) && ( state_prev[7] !== state_expected_prev[7] )
		&& ((state_expected_prev[7] !== last_state_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[7] = state_expected_prev[7];
	end
	if (
		( state_expected_prev[8] !== 1'bx ) && ( state_prev[8] !== state_expected_prev[8] )
		&& ((state_expected_prev[8] !== last_state_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_state_exp[8] = state_expected_prev[8];
	end
	if (
		( terminal_expected_prev !== 1'bx ) && ( terminal_prev !== terminal_expected_prev )
		&& ((terminal_expected_prev !== last_terminal_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port terminal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", terminal_expected_prev);
		$display ("     Real value = %b", terminal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_terminal_exp = terminal_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg goto_third;
reg pause;
reg restart;
reg rst;
// wires                                               
wire [2:0] Out1;
wire [2:0] Out2;
wire even;
wire odd;
wire [8:0] state;
wire terminal;

wire sampler;                             

// assign statements (if any)                          
fsm i1 (
// port map - connection between master ports and signals/registers   
	.Out1(Out1),
	.Out2(Out2),
	.clk(clk),
	.even(even),
	.goto_third(goto_third),
	.odd(odd),
	.pause(pause),
	.restart(restart),
	.rst(rst),
	.state(state),
	.terminal(terminal)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// goto_third
initial
begin
	goto_third = 1'b0;
	goto_third = #90000 1'b1;
	goto_third = #10000 1'b0;
	goto_third = #10000 1'b1;
	goto_third = #10000 1'b0;
end 

// restart
initial
begin
	restart = 1'b0;
	restart = #50000 1'b1;
	restart = #10000 1'b0;
	restart = #80000 1'b1;
	restart = #10000 1'b0;
end 

// pause
initial
begin
	pause = 1'b0;
	pause = #40000 1'b1;
	pause = #10000 1'b0;
	pause = #140000 1'b1;
	pause = #10000 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #10000 1'b0;
	rst = #200000 1'b1;
	rst = #10000 1'b0;
end 

fsm_vlg_sample_tst tb_sample (
	.clk(clk),
	.goto_third(goto_third),
	.pause(pause),
	.restart(restart),
	.rst(rst),
	.sampler_tx(sampler)
);

fsm_vlg_check_tst tb_out(
	.Out1(Out1),
	.Out2(Out2),
	.even(even),
	.odd(odd),
	.state(state),
	.terminal(terminal),
	.sampler_rx(sampler)
);
endmodule

