// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/13/2020 00:42:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fsm_vlg_sample_tst(
	clk,
	kbd_data_ready,
	key_pressed,
	read_complete,
	sampler_tx
);
input  clk;
input  kbd_data_ready;
input [0:7] key_pressed;
input  read_complete;
output sampler_tx;

reg sample;
time current_time;
always @(clk or kbd_data_ready or key_pressed or read_complete)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fsm_vlg_check_tst (
	direction,
	read_signal,
	reset,
	sampler_rx
);
input  direction;
input  read_signal;
input  reset;
input sampler_rx;

reg  direction_expected;
reg  read_signal_expected;
reg  reset_expected;

reg  direction_prev;
reg  read_signal_prev;
reg  reset_prev;

reg  direction_expected_prev;
reg  read_signal_expected_prev;
reg  reset_expected_prev;

reg  last_direction_exp;
reg  last_read_signal_exp;
reg  last_reset_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	direction_prev = direction;
	read_signal_prev = read_signal;
	reset_prev = reset;
end

// update expected /o prevs

always @(trigger)
begin
	direction_expected_prev = direction_expected;
	read_signal_expected_prev = read_signal_expected;
	reset_expected_prev = reset_expected;
end



// expected read_signal
initial
begin
	read_signal_expected = 1'bX;
end 

// expected reset
initial
begin
	reset_expected = 1'bX;
end 

// expected direction
initial
begin
	direction_expected = 1'bX;
end 
// generate trigger
always @(direction_expected or direction or read_signal_expected or read_signal or reset_expected or reset)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected direction = %b | expected read_signal = %b | expected reset = %b | ",direction_expected_prev,read_signal_expected_prev,reset_expected_prev);
	$display("| real direction = %b | real read_signal = %b | real reset = %b | ",direction_prev,read_signal_prev,reset_prev);
`endif
	if (
		( direction_expected_prev !== 1'bx ) && ( direction_prev !== direction_expected_prev )
		&& ((direction_expected_prev !== last_direction_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port direction :: @time = %t",  $realtime);
		$display ("     Expected value = %b", direction_expected_prev);
		$display ("     Real value = %b", direction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_direction_exp = direction_expected_prev;
	end
	if (
		( read_signal_expected_prev !== 1'bx ) && ( read_signal_prev !== read_signal_expected_prev )
		&& ((read_signal_expected_prev !== last_read_signal_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_signal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_signal_expected_prev);
		$display ("     Real value = %b", read_signal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_read_signal_exp = read_signal_expected_prev;
	end
	if (
		( reset_expected_prev !== 1'bx ) && ( reset_prev !== reset_expected_prev )
		&& ((reset_expected_prev !== last_reset_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_expected_prev);
		$display ("     Real value = %b", reset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_reset_exp = reset_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg kbd_data_ready;
reg [0:7] key_pressed;
reg read_complete;
// wires                                               
wire direction;
wire read_signal;
wire reset;

wire sampler;                             

// assign statements (if any)                          
fsm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.direction(direction),
	.kbd_data_ready(kbd_data_ready),
	.key_pressed(key_pressed),
	.read_complete(read_complete),
	.read_signal(read_signal),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// kbd_data_ready
initial
begin
	kbd_data_ready = 1'b1;
end 
// key_pressed[ 7 ]
initial
begin
	key_pressed[7] = 1'b1;
	key_pressed[7] = #30000 1'b0;
	key_pressed[7] = #80000 1'b1;
	key_pressed[7] = #540000 1'b0;
	key_pressed[7] = #40000 1'b1;
end 
// key_pressed[ 6 ]
initial
begin
	key_pressed[6] = 1'b0;
	key_pressed[6] = #30000 1'b1;
	key_pressed[6] = #80000 1'b0;
end 
// key_pressed[ 5 ]
initial
begin
	key_pressed[5] = 1'b1;
	key_pressed[5] = #30000 1'b0;
	key_pressed[5] = #20000 1'b1;
	key_pressed[5] = #30000 1'b0;
	key_pressed[5] = #30000 1'b1;
end 
// key_pressed[ 4 ]
initial
begin
	key_pressed[4] = 1'b0;
end 
// key_pressed[ 3 ]
initial
begin
	key_pressed[3] = 1'b0;
	key_pressed[3] = #80000 1'b1;
	key_pressed[3] = #30000 1'b0;
end 
// key_pressed[ 2 ]
initial
begin
	key_pressed[2] = 1'b0;
end 
// key_pressed[ 1 ]
initial
begin
	key_pressed[1] = 1'b1;
end 
// key_pressed[ 0 ]
initial
begin
	key_pressed[0] = 1'b0;
end 

// read_complete
initial
begin
	read_complete = 1'b1;
	read_complete = #320000 1'b0;
	read_complete = #260000 1'b1;
end 

fsm_vlg_sample_tst tb_sample (
	.clk(clk),
	.kbd_data_ready(kbd_data_ready),
	.key_pressed(key_pressed),
	.read_complete(read_complete),
	.sampler_tx(sampler)
);

fsm_vlg_check_tst tb_out(
	.direction(direction),
	.read_signal(read_signal),
	.reset(reset),
	.sampler_rx(sampler)
);
endmodule

