// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 14.1.0 Build 186 12/03/2014 SJ Web Edition"

// DATE "04/15/2020 20:08:58"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module fsm (
	clk,
	start,
	read,
	waitRequest,
	dataValid,
	complete);
input 	clk;
input 	start;
input 	read;
input 	waitRequest;
input 	dataValid;
output 	complete;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \complete~output_o ;
wire \clk~input_o ;
wire \Selector3~0_combout ;
wire \start~input_o ;
wire \waitRequest~input_o ;
wire \read~input_o ;
wire \dataValid~input_o ;
wire \Selector2~0_combout ;
wire \state[0]~0_combout ;
wire \state[0]~2_combout ;
wire \state[0]~1_combout ;
wire [4:0] state;


cyclonev_io_obuf \complete~output (
	.i(state[0]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\complete~output_o ),
	.obar());
// synopsys translate_off
defparam \complete~output .bus_hold = "false";
defparam \complete~output .open_drain_output = "false";
defparam \complete~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \Selector3~0 (
// Equation(s):
// \Selector3~0_combout  = !state[0] $ (state[1])

	.dataa(!state[0]),
	.datab(!state[1]),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\Selector3~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \Selector3~0 .extended_lut = "off";
defparam \Selector3~0 .lut_mask = 64'h9999999999999999;
defparam \Selector3~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \start~input (
	.i(start),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\start~input_o ));
// synopsys translate_off
defparam \start~input .bus_hold = "false";
defparam \start~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \waitRequest~input (
	.i(waitRequest),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\waitRequest~input_o ));
// synopsys translate_off
defparam \waitRequest~input .bus_hold = "false";
defparam \waitRequest~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \read~input (
	.i(read),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\read~input_o ));
// synopsys translate_off
defparam \read~input .bus_hold = "false";
defparam \read~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \dataValid~input (
	.i(dataValid),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\dataValid~input_o ));
// synopsys translate_off
defparam \dataValid~input .bus_hold = "false";
defparam \dataValid~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \Selector2~0 (
// Equation(s):
// \Selector2~0_combout  = !state[2] $ (((!state[1]) # (state[0])))

	.dataa(!state[0]),
	.datab(!state[1]),
	.datac(!state[2]),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\Selector2~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \Selector2~0 .extended_lut = "off";
defparam \Selector2~0 .lut_mask = 64'h2D2D2D2D2D2D2D2D;
defparam \Selector2~0 .shared_arith = "off";
// synopsys translate_on

dffeas \state[2] (
	.clk(\clk~input_o ),
	.d(\Selector2~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\state[0]~2_combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(state[2]),
	.prn(vcc));
// synopsys translate_off
defparam \state[2] .is_wysiwyg = "true";
defparam \state[2] .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \state[0]~0 (
// Equation(s):
// \state[0]~0_combout  = ( state[2] & ( state[1] & ( \dataValid~input_o  ) ) ) # ( !state[2] & ( state[1] & ( !\read~input_o  ) ) ) # ( state[2] & ( !state[1] & ( \waitRequest~input_o  ) ) ) # ( !state[2] & ( !state[1] & ( !\start~input_o  ) ) )

	.dataa(!\start~input_o ),
	.datab(!\waitRequest~input_o ),
	.datac(!\read~input_o ),
	.datad(!\dataValid~input_o ),
	.datae(!state[2]),
	.dataf(!state[1]),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\state[0]~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state[0]~0 .extended_lut = "off";
defparam \state[0]~0 .lut_mask = 64'hAAAA3333F0F000FF;
defparam \state[0]~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \state[0]~2 (
// Equation(s):
// \state[0]~2_combout  = (!\state[0]~0_combout ) # (state[0])

	.dataa(!state[0]),
	.datab(!\state[0]~0_combout ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\state[0]~2_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state[0]~2 .extended_lut = "off";
defparam \state[0]~2 .lut_mask = 64'hDDDDDDDDDDDDDDDD;
defparam \state[0]~2 .shared_arith = "off";
// synopsys translate_on

dffeas \state[1] (
	.clk(\clk~input_o ),
	.d(\Selector3~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\state[0]~2_combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(state[1]),
	.prn(vcc));
// synopsys translate_off
defparam \state[1] .is_wysiwyg = "true";
defparam \state[1] .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \state[0]~1 (
// Equation(s):
// \state[0]~1_combout  = (!state[0] & (state[1] & (state[2] & !\state[0]~0_combout ))) # (state[0] & (((state[2])) # (state[1])))

	.dataa(!state[0]),
	.datab(!state[1]),
	.datac(!state[2]),
	.datad(!\state[0]~0_combout ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\state[0]~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \state[0]~1 .extended_lut = "off";
defparam \state[0]~1 .lut_mask = 64'h1715171517151715;
defparam \state[0]~1 .shared_arith = "off";
// synopsys translate_on

dffeas \state[0] (
	.clk(\clk~input_o ),
	.d(\state[0]~1_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(state[0]),
	.prn(vcc));
// synopsys translate_off
defparam \state[0] .is_wysiwyg = "true";
defparam \state[0] .power_up = "low";
// synopsys translate_on

assign complete = \complete~output_o ;

endmodule
